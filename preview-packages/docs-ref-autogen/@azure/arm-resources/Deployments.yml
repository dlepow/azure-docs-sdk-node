### YamlMime:TSType
name: Deployments
uid: '@azure/arm-resources.Deployments'
package: '@azure/arm-resources'
summary: Interface representing a Deployments.
fullName: Deployments
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: >-
      beginCreateOrUpdate(string, string, Deployment,
      DeploymentsCreateOrUpdateOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginCreateOrUpdate'
    package: '@azure/arm-resources'
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateOrUpdate(resourceGroupName: string, deploymentName:
        string, parameters: Deployment, options?:
        DeploymentsCreateOrUpdateOptionalParams):
        Promise<PollerLike<PollOperationState<DeploymentsCreateOrUpdateResponse>,
        DeploymentsCreateOrUpdateResponse>>
      parameters:
        - id: resourceGroupName
          type: string
          description: >-
            The name of the resource group to deploy the resources to. The name
            is case
                                     insensitive. The resource group must already exist.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.Deployment" />
          description: Additional parameters supplied to the operation.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsCreateOrUpdateOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-resources.DeploymentsCreateOrUpdateResponse" />&gt;,
          <xref uid="@azure/arm-resources.DeploymentsCreateOrUpdateResponse"
          />&gt;&gt;
  - name: >-
      beginCreateOrUpdateAndWait(string, string, Deployment,
      DeploymentsCreateOrUpdateOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginCreateOrUpdateAndWait'
    package: '@azure/arm-resources'
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateOrUpdateAndWait(resourceGroupName: string,
        deploymentName: string, parameters: Deployment, options?:
        DeploymentsCreateOrUpdateOptionalParams):
        Promise<DeploymentsCreateOrUpdateResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: >-
            The name of the resource group to deploy the resources to. The name
            is case
                                     insensitive. The resource group must already exist.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.Deployment" />
          description: Additional parameters supplied to the operation.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsCreateOrUpdateOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsCreateOrUpdateResponse" />&gt;
  - name: >-
      beginCreateOrUpdateAtManagementGroupScope(string, string,
      ScopedDeployment,
      DeploymentsCreateOrUpdateAtManagementGroupScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginCreateOrUpdateAtManagementGroupScope'
    package: '@azure/arm-resources'
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateOrUpdateAtManagementGroupScope(groupId: string,
        deploymentName: string, parameters: ScopedDeployment, options?:
        DeploymentsCreateOrUpdateAtManagementGroupScopeOptionalParams):
        Promise<PollerLike<PollOperationState<DeploymentsCreateOrUpdateAtManagementGroupScopeResponse>,
        DeploymentsCreateOrUpdateAtManagementGroupScopeResponse>>
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.ScopedDeployment" />
          description: Additional parameters supplied to the operation.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsCreateOrUpdateAtManagementGroupScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-resources.DeploymentsCreateOrUpdateAtManagementGroupScopeResponse"
          />&gt;, <xref
          uid="@azure/arm-resources.DeploymentsCreateOrUpdateAtManagementGroupScopeResponse"
          />&gt;&gt;
  - name: >-
      beginCreateOrUpdateAtManagementGroupScopeAndWait(string, string,
      ScopedDeployment,
      DeploymentsCreateOrUpdateAtManagementGroupScopeOptionalParams)
    uid: >-
      @azure/arm-resources.Deployments.beginCreateOrUpdateAtManagementGroupScopeAndWait
    package: '@azure/arm-resources'
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateOrUpdateAtManagementGroupScopeAndWait(groupId:
        string, deploymentName: string, parameters: ScopedDeployment, options?:
        DeploymentsCreateOrUpdateAtManagementGroupScopeOptionalParams):
        Promise<DeploymentsCreateOrUpdateAtManagementGroupScopeResponse>
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.ScopedDeployment" />
          description: Additional parameters supplied to the operation.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsCreateOrUpdateAtManagementGroupScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsCreateOrUpdateAtManagementGroupScopeResponse"
          />&gt;
  - name: >-
      beginCreateOrUpdateAtScope(string, string, Deployment,
      DeploymentsCreateOrUpdateAtScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginCreateOrUpdateAtScope'
    package: '@azure/arm-resources'
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateOrUpdateAtScope(scope: string, deploymentName:
        string, parameters: Deployment, options?:
        DeploymentsCreateOrUpdateAtScopeOptionalParams):
        Promise<PollerLike<PollOperationState<DeploymentsCreateOrUpdateAtScopeResponse>,
        DeploymentsCreateOrUpdateAtScopeResponse>>
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.Deployment" />
          description: Additional parameters supplied to the operation.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsCreateOrUpdateAtScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-resources.DeploymentsCreateOrUpdateAtScopeResponse"
          />&gt;, <xref
          uid="@azure/arm-resources.DeploymentsCreateOrUpdateAtScopeResponse"
          />&gt;&gt;
  - name: >-
      beginCreateOrUpdateAtScopeAndWait(string, string, Deployment,
      DeploymentsCreateOrUpdateAtScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginCreateOrUpdateAtScopeAndWait'
    package: '@azure/arm-resources'
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateOrUpdateAtScopeAndWait(scope: string,
        deploymentName: string, parameters: Deployment, options?:
        DeploymentsCreateOrUpdateAtScopeOptionalParams):
        Promise<DeploymentsCreateOrUpdateAtScopeResponse>
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.Deployment" />
          description: Additional parameters supplied to the operation.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsCreateOrUpdateAtScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsCreateOrUpdateAtScopeResponse"
          />&gt;
  - name: >-
      beginCreateOrUpdateAtSubscriptionScope(string, Deployment,
      DeploymentsCreateOrUpdateAtSubscriptionScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginCreateOrUpdateAtSubscriptionScope'
    package: '@azure/arm-resources'
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateOrUpdateAtSubscriptionScope(deploymentName: string,
        parameters: Deployment, options?:
        DeploymentsCreateOrUpdateAtSubscriptionScopeOptionalParams):
        Promise<PollerLike<PollOperationState<DeploymentsCreateOrUpdateAtSubscriptionScopeResponse>,
        DeploymentsCreateOrUpdateAtSubscriptionScopeResponse>>
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.Deployment" />
          description: Additional parameters supplied to the operation.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsCreateOrUpdateAtSubscriptionScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-resources.DeploymentsCreateOrUpdateAtSubscriptionScopeResponse"
          />&gt;, <xref
          uid="@azure/arm-resources.DeploymentsCreateOrUpdateAtSubscriptionScopeResponse"
          />&gt;&gt;
  - name: >-
      beginCreateOrUpdateAtSubscriptionScopeAndWait(string, Deployment,
      DeploymentsCreateOrUpdateAtSubscriptionScopeOptionalParams)
    uid: >-
      @azure/arm-resources.Deployments.beginCreateOrUpdateAtSubscriptionScopeAndWait
    package: '@azure/arm-resources'
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateOrUpdateAtSubscriptionScopeAndWait(deploymentName:
        string, parameters: Deployment, options?:
        DeploymentsCreateOrUpdateAtSubscriptionScopeOptionalParams):
        Promise<DeploymentsCreateOrUpdateAtSubscriptionScopeResponse>
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.Deployment" />
          description: Additional parameters supplied to the operation.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsCreateOrUpdateAtSubscriptionScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsCreateOrUpdateAtSubscriptionScopeResponse"
          />&gt;
  - name: >-
      beginCreateOrUpdateAtTenantScope(string, ScopedDeployment,
      DeploymentsCreateOrUpdateAtTenantScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginCreateOrUpdateAtTenantScope'
    package: '@azure/arm-resources'
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateOrUpdateAtTenantScope(deploymentName: string,
        parameters: ScopedDeployment, options?:
        DeploymentsCreateOrUpdateAtTenantScopeOptionalParams):
        Promise<PollerLike<PollOperationState<DeploymentsCreateOrUpdateAtTenantScopeResponse>,
        DeploymentsCreateOrUpdateAtTenantScopeResponse>>
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.ScopedDeployment" />
          description: Additional parameters supplied to the operation.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsCreateOrUpdateAtTenantScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-resources.DeploymentsCreateOrUpdateAtTenantScopeResponse"
          />&gt;, <xref
          uid="@azure/arm-resources.DeploymentsCreateOrUpdateAtTenantScopeResponse"
          />&gt;&gt;
  - name: >-
      beginCreateOrUpdateAtTenantScopeAndWait(string, ScopedDeployment,
      DeploymentsCreateOrUpdateAtTenantScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginCreateOrUpdateAtTenantScopeAndWait'
    package: '@azure/arm-resources'
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateOrUpdateAtTenantScopeAndWait(deploymentName: string,
        parameters: ScopedDeployment, options?:
        DeploymentsCreateOrUpdateAtTenantScopeOptionalParams):
        Promise<DeploymentsCreateOrUpdateAtTenantScopeResponse>
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.ScopedDeployment" />
          description: Additional parameters supplied to the operation.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsCreateOrUpdateAtTenantScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsCreateOrUpdateAtTenantScopeResponse"
          />&gt;
  - name: 'beginDelete(string, string, DeploymentsDeleteOptionalParams)'
    uid: '@azure/arm-resources.Deployments.beginDelete'
    package: '@azure/arm-resources'
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template deployment

      removes the associated deployment operations. Deleting a template
      deployment does not affect the

      state of the resource group. This is an asynchronous operation that
      returns a status of 202 until

      the template deployment is successfully deleted. The Location response
      header contains the URI that

      is used to obtain the status of the process. While the process is running,
      a call to the URI in the

      Location header returns a status of 202. When the process finishes, the
      URI in the Location header

      returns a status of 204 on success. If the asynchronous request failed,
      the URI in the Location

      header returns an error-level status code.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDelete(resourceGroupName: string, deploymentName: string,
        options?: DeploymentsDeleteOptionalParams):
        Promise<PollerLike<PollOperationState<void>, void>>
      parameters:
        - id: resourceGroupName
          type: string
          description: >-
            The name of the resource group with the deployment to delete. The
            name is
                                     case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="@azure/arm-resources.DeploymentsDeleteOptionalParams" />
          description: |
            The options parameters.
      return:
        description: ''
        type: 'Promise&lt;PollerLike&lt;PollOperationState&lt;void&gt;, void&gt;&gt;'
  - name: 'beginDeleteAndWait(string, string, DeploymentsDeleteOptionalParams)'
    uid: '@azure/arm-resources.Deployments.beginDeleteAndWait'
    package: '@azure/arm-resources'
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template deployment

      removes the associated deployment operations. Deleting a template
      deployment does not affect the

      state of the resource group. This is an asynchronous operation that
      returns a status of 202 until

      the template deployment is successfully deleted. The Location response
      header contains the URI that

      is used to obtain the status of the process. While the process is running,
      a call to the URI in the

      Location header returns a status of 202. When the process finishes, the
      URI in the Location header

      returns a status of 204 on success. If the asynchronous request failed,
      the URI in the Location

      header returns an error-level status code.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteAndWait(resourceGroupName: string, deploymentName:
        string, options?: DeploymentsDeleteOptionalParams): Promise<void>
      parameters:
        - id: resourceGroupName
          type: string
          description: >-
            The name of the resource group with the deployment to delete. The
            name is
                                     case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="@azure/arm-resources.DeploymentsDeleteOptionalParams" />
          description: |
            The options parameters.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: >-
      beginDeleteAtManagementGroupScope(string, string,
      DeploymentsDeleteAtManagementGroupScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginDeleteAtManagementGroupScope'
    package: '@azure/arm-resources'
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template deployment

      removes the associated deployment operations. This is an asynchronous
      operation that returns a

      status of 202 until the template deployment is successfully deleted. The
      Location response header

      contains the URI that is used to obtain the status of the process. While
      the process is running, a

      call to the URI in the Location header returns a status of 202. When the
      process finishes, the URI

      in the Location header returns a status of 204 on success. If the
      asynchronous request failed, the

      URI in the Location header returns an error-level status code.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteAtManagementGroupScope(groupId: string,
        deploymentName: string, options?:
        DeploymentsDeleteAtManagementGroupScopeOptionalParams):
        Promise<PollerLike<PollOperationState<void>, void>>
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsDeleteAtManagementGroupScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: 'Promise&lt;PollerLike&lt;PollOperationState&lt;void&gt;, void&gt;&gt;'
  - name: >-
      beginDeleteAtManagementGroupScopeAndWait(string, string,
      DeploymentsDeleteAtManagementGroupScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginDeleteAtManagementGroupScopeAndWait'
    package: '@azure/arm-resources'
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template deployment

      removes the associated deployment operations. This is an asynchronous
      operation that returns a

      status of 202 until the template deployment is successfully deleted. The
      Location response header

      contains the URI that is used to obtain the status of the process. While
      the process is running, a

      call to the URI in the Location header returns a status of 202. When the
      process finishes, the URI

      in the Location header returns a status of 204 on success. If the
      asynchronous request failed, the

      URI in the Location header returns an error-level status code.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteAtManagementGroupScopeAndWait(groupId: string,
        deploymentName: string, options?:
        DeploymentsDeleteAtManagementGroupScopeOptionalParams): Promise<void>
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsDeleteAtManagementGroupScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'beginDeleteAtScope(string, string, DeploymentsDeleteAtScopeOptionalParams)'
    uid: '@azure/arm-resources.Deployments.beginDeleteAtScope'
    package: '@azure/arm-resources'
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template deployment

      removes the associated deployment operations. This is an asynchronous
      operation that returns a

      status of 202 until the template deployment is successfully deleted. The
      Location response header

      contains the URI that is used to obtain the status of the process. While
      the process is running, a

      call to the URI in the Location header returns a status of 202. When the
      process finishes, the URI

      in the Location header returns a status of 204 on success. If the
      asynchronous request failed, the

      URI in the Location header returns an error-level status code.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteAtScope(scope: string, deploymentName: string,
        options?: DeploymentsDeleteAtScopeOptionalParams):
        Promise<PollerLike<PollOperationState<void>, void>>
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsDeleteAtScopeOptionalParams" />
          description: |
            The options parameters.
      return:
        description: ''
        type: 'Promise&lt;PollerLike&lt;PollOperationState&lt;void&gt;, void&gt;&gt;'
  - name: >-
      beginDeleteAtScopeAndWait(string, string,
      DeploymentsDeleteAtScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginDeleteAtScopeAndWait'
    package: '@azure/arm-resources'
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template deployment

      removes the associated deployment operations. This is an asynchronous
      operation that returns a

      status of 202 until the template deployment is successfully deleted. The
      Location response header

      contains the URI that is used to obtain the status of the process. While
      the process is running, a

      call to the URI in the Location header returns a status of 202. When the
      process finishes, the URI

      in the Location header returns a status of 204 on success. If the
      asynchronous request failed, the

      URI in the Location header returns an error-level status code.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteAtScopeAndWait(scope: string, deploymentName:
        string, options?: DeploymentsDeleteAtScopeOptionalParams): Promise<void>
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsDeleteAtScopeOptionalParams" />
          description: |
            The options parameters.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: >-
      beginDeleteAtSubscriptionScope(string,
      DeploymentsDeleteAtSubscriptionScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginDeleteAtSubscriptionScope'
    package: '@azure/arm-resources'
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template deployment

      removes the associated deployment operations. This is an asynchronous
      operation that returns a

      status of 202 until the template deployment is successfully deleted. The
      Location response header

      contains the URI that is used to obtain the status of the process. While
      the process is running, a

      call to the URI in the Location header returns a status of 202. When the
      process finishes, the URI

      in the Location header returns a status of 204 on success. If the
      asynchronous request failed, the

      URI in the Location header returns an error-level status code.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteAtSubscriptionScope(deploymentName: string,
        options?: DeploymentsDeleteAtSubscriptionScopeOptionalParams):
        Promise<PollerLike<PollOperationState<void>, void>>
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsDeleteAtSubscriptionScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: 'Promise&lt;PollerLike&lt;PollOperationState&lt;void&gt;, void&gt;&gt;'
  - name: >-
      beginDeleteAtSubscriptionScopeAndWait(string,
      DeploymentsDeleteAtSubscriptionScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginDeleteAtSubscriptionScopeAndWait'
    package: '@azure/arm-resources'
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template deployment

      removes the associated deployment operations. This is an asynchronous
      operation that returns a

      status of 202 until the template deployment is successfully deleted. The
      Location response header

      contains the URI that is used to obtain the status of the process. While
      the process is running, a

      call to the URI in the Location header returns a status of 202. When the
      process finishes, the URI

      in the Location header returns a status of 204 on success. If the
      asynchronous request failed, the

      URI in the Location header returns an error-level status code.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteAtSubscriptionScopeAndWait(deploymentName: string,
        options?: DeploymentsDeleteAtSubscriptionScopeOptionalParams):
        Promise<void>
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsDeleteAtSubscriptionScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: >-
      beginDeleteAtTenantScope(string,
      DeploymentsDeleteAtTenantScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginDeleteAtTenantScope'
    package: '@azure/arm-resources'
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template deployment

      removes the associated deployment operations. This is an asynchronous
      operation that returns a

      status of 202 until the template deployment is successfully deleted. The
      Location response header

      contains the URI that is used to obtain the status of the process. While
      the process is running, a

      call to the URI in the Location header returns a status of 202. When the
      process finishes, the URI

      in the Location header returns a status of 204 on success. If the
      asynchronous request failed, the

      URI in the Location header returns an error-level status code.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteAtTenantScope(deploymentName: string, options?:
        DeploymentsDeleteAtTenantScopeOptionalParams):
        Promise<PollerLike<PollOperationState<void>, void>>
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsDeleteAtTenantScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: 'Promise&lt;PollerLike&lt;PollOperationState&lt;void&gt;, void&gt;&gt;'
  - name: >-
      beginDeleteAtTenantScopeAndWait(string,
      DeploymentsDeleteAtTenantScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginDeleteAtTenantScopeAndWait'
    package: '@azure/arm-resources'
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template deployment

      removes the associated deployment operations. This is an asynchronous
      operation that returns a

      status of 202 until the template deployment is successfully deleted. The
      Location response header

      contains the URI that is used to obtain the status of the process. While
      the process is running, a

      call to the URI in the Location header returns a status of 202. When the
      process finishes, the URI

      in the Location header returns a status of 204 on success. If the
      asynchronous request failed, the

      URI in the Location header returns an error-level status code.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteAtTenantScopeAndWait(deploymentName: string,
        options?: DeploymentsDeleteAtTenantScopeOptionalParams): Promise<void>
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsDeleteAtTenantScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: >-
      beginValidate(string, string, Deployment,
      DeploymentsValidateOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginValidate'
    package: '@azure/arm-resources'
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginValidate(resourceGroupName: string, deploymentName:
        string, parameters: Deployment, options?:
        DeploymentsValidateOptionalParams):
        Promise<PollerLike<PollOperationState<DeploymentsValidateResponse>,
        DeploymentsValidateResponse>>
      parameters:
        - id: resourceGroupName
          type: string
          description: >-
            The name of the resource group the template will be deployed to. The
            name
                                     is case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.Deployment" />
          description: Parameters to validate.
        - id: options
          type: >-
            <xref uid="@azure/arm-resources.DeploymentsValidateOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-resources.DeploymentsValidateResponse" />&gt;, <xref
          uid="@azure/arm-resources.DeploymentsValidateResponse" />&gt;&gt;
  - name: >-
      beginValidateAndWait(string, string, Deployment,
      DeploymentsValidateOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginValidateAndWait'
    package: '@azure/arm-resources'
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginValidateAndWait(resourceGroupName: string, deploymentName:
        string, parameters: Deployment, options?:
        DeploymentsValidateOptionalParams): Promise<DeploymentsValidateResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: >-
            The name of the resource group the template will be deployed to. The
            name
                                     is case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.Deployment" />
          description: Parameters to validate.
        - id: options
          type: >-
            <xref uid="@azure/arm-resources.DeploymentsValidateOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsValidateResponse" />&gt;
  - name: >-
      beginValidateAtManagementGroupScope(string, string, ScopedDeployment,
      DeploymentsValidateAtManagementGroupScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginValidateAtManagementGroupScope'
    package: '@azure/arm-resources'
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginValidateAtManagementGroupScope(groupId: string,
        deploymentName: string, parameters: ScopedDeployment, options?:
        DeploymentsValidateAtManagementGroupScopeOptionalParams):
        Promise<PollerLike<PollOperationState<DeploymentsValidateAtManagementGroupScopeResponse>,
        DeploymentsValidateAtManagementGroupScopeResponse>>
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.ScopedDeployment" />
          description: Parameters to validate.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsValidateAtManagementGroupScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-resources.DeploymentsValidateAtManagementGroupScopeResponse"
          />&gt;, <xref
          uid="@azure/arm-resources.DeploymentsValidateAtManagementGroupScopeResponse"
          />&gt;&gt;
  - name: >-
      beginValidateAtManagementGroupScopeAndWait(string, string,
      ScopedDeployment, DeploymentsValidateAtManagementGroupScopeOptionalParams)
    uid: >-
      @azure/arm-resources.Deployments.beginValidateAtManagementGroupScopeAndWait
    package: '@azure/arm-resources'
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginValidateAtManagementGroupScopeAndWait(groupId: string,
        deploymentName: string, parameters: ScopedDeployment, options?:
        DeploymentsValidateAtManagementGroupScopeOptionalParams):
        Promise<DeploymentsValidateAtManagementGroupScopeResponse>
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.ScopedDeployment" />
          description: Parameters to validate.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsValidateAtManagementGroupScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsValidateAtManagementGroupScopeResponse"
          />&gt;
  - name: >-
      beginValidateAtScope(string, string, Deployment,
      DeploymentsValidateAtScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginValidateAtScope'
    package: '@azure/arm-resources'
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginValidateAtScope(scope: string, deploymentName: string,
        parameters: Deployment, options?:
        DeploymentsValidateAtScopeOptionalParams):
        Promise<PollerLike<PollOperationState<DeploymentsValidateAtScopeResponse>,
        DeploymentsValidateAtScopeResponse>>
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.Deployment" />
          description: Parameters to validate.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsValidateAtScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-resources.DeploymentsValidateAtScopeResponse" />&gt;,
          <xref uid="@azure/arm-resources.DeploymentsValidateAtScopeResponse"
          />&gt;&gt;
  - name: >-
      beginValidateAtScopeAndWait(string, string, Deployment,
      DeploymentsValidateAtScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginValidateAtScopeAndWait'
    package: '@azure/arm-resources'
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginValidateAtScopeAndWait(scope: string, deploymentName:
        string, parameters: Deployment, options?:
        DeploymentsValidateAtScopeOptionalParams):
        Promise<DeploymentsValidateAtScopeResponse>
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.Deployment" />
          description: Parameters to validate.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsValidateAtScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsValidateAtScopeResponse" />&gt;
  - name: >-
      beginValidateAtSubscriptionScope(string, Deployment,
      DeploymentsValidateAtSubscriptionScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginValidateAtSubscriptionScope'
    package: '@azure/arm-resources'
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginValidateAtSubscriptionScope(deploymentName: string,
        parameters: Deployment, options?:
        DeploymentsValidateAtSubscriptionScopeOptionalParams):
        Promise<PollerLike<PollOperationState<DeploymentsValidateAtSubscriptionScopeResponse>,
        DeploymentsValidateAtSubscriptionScopeResponse>>
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.Deployment" />
          description: Parameters to validate.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsValidateAtSubscriptionScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-resources.DeploymentsValidateAtSubscriptionScopeResponse"
          />&gt;, <xref
          uid="@azure/arm-resources.DeploymentsValidateAtSubscriptionScopeResponse"
          />&gt;&gt;
  - name: >-
      beginValidateAtSubscriptionScopeAndWait(string, Deployment,
      DeploymentsValidateAtSubscriptionScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginValidateAtSubscriptionScopeAndWait'
    package: '@azure/arm-resources'
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginValidateAtSubscriptionScopeAndWait(deploymentName: string,
        parameters: Deployment, options?:
        DeploymentsValidateAtSubscriptionScopeOptionalParams):
        Promise<DeploymentsValidateAtSubscriptionScopeResponse>
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.Deployment" />
          description: Parameters to validate.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsValidateAtSubscriptionScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsValidateAtSubscriptionScopeResponse"
          />&gt;
  - name: >-
      beginValidateAtTenantScope(string, ScopedDeployment,
      DeploymentsValidateAtTenantScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginValidateAtTenantScope'
    package: '@azure/arm-resources'
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginValidateAtTenantScope(deploymentName: string, parameters:
        ScopedDeployment, options?:
        DeploymentsValidateAtTenantScopeOptionalParams):
        Promise<PollerLike<PollOperationState<DeploymentsValidateAtTenantScopeResponse>,
        DeploymentsValidateAtTenantScopeResponse>>
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.ScopedDeployment" />
          description: Parameters to validate.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsValidateAtTenantScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-resources.DeploymentsValidateAtTenantScopeResponse"
          />&gt;, <xref
          uid="@azure/arm-resources.DeploymentsValidateAtTenantScopeResponse"
          />&gt;&gt;
  - name: >-
      beginValidateAtTenantScopeAndWait(string, ScopedDeployment,
      DeploymentsValidateAtTenantScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginValidateAtTenantScopeAndWait'
    package: '@azure/arm-resources'
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginValidateAtTenantScopeAndWait(deploymentName: string,
        parameters: ScopedDeployment, options?:
        DeploymentsValidateAtTenantScopeOptionalParams):
        Promise<DeploymentsValidateAtTenantScopeResponse>
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.ScopedDeployment" />
          description: Parameters to validate.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsValidateAtTenantScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsValidateAtTenantScopeResponse"
          />&gt;
  - name: >-
      beginWhatIf(string, string, DeploymentWhatIf,
      DeploymentsWhatIfOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginWhatIf'
    package: '@azure/arm-resources'
    summary: >-
      Returns changes that will be made by the deployment if executed at the
      scope of the resource group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginWhatIf(resourceGroupName: string, deploymentName: string,
        parameters: DeploymentWhatIf, options?:
        DeploymentsWhatIfOptionalParams):
        Promise<PollerLike<PollOperationState<DeploymentsWhatIfResponse>,
        DeploymentsWhatIfResponse>>
      parameters:
        - id: resourceGroupName
          type: string
          description: >-
            The name of the resource group the template will be deployed to. The
            name
                                     is case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.DeploymentWhatIf" />
          description: Parameters to validate.
        - id: options
          type: <xref uid="@azure/arm-resources.DeploymentsWhatIfOptionalParams" />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-resources.DeploymentsWhatIfResponse" />&gt;, <xref
          uid="@azure/arm-resources.DeploymentsWhatIfResponse" />&gt;&gt;
  - name: >-
      beginWhatIfAndWait(string, string, DeploymentWhatIf,
      DeploymentsWhatIfOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginWhatIfAndWait'
    package: '@azure/arm-resources'
    summary: >-
      Returns changes that will be made by the deployment if executed at the
      scope of the resource group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginWhatIfAndWait(resourceGroupName: string, deploymentName:
        string, parameters: DeploymentWhatIf, options?:
        DeploymentsWhatIfOptionalParams): Promise<DeploymentsWhatIfResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: >-
            The name of the resource group the template will be deployed to. The
            name
                                     is case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.DeploymentWhatIf" />
          description: Parameters to validate.
        - id: options
          type: <xref uid="@azure/arm-resources.DeploymentsWhatIfOptionalParams" />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/arm-resources.DeploymentsWhatIfResponse"
          />&gt;
  - name: >-
      beginWhatIfAtManagementGroupScope(string, string, ScopedDeploymentWhatIf,
      DeploymentsWhatIfAtManagementGroupScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginWhatIfAtManagementGroupScope'
    package: '@azure/arm-resources'
    summary: >-
      Returns changes that will be made by the deployment if executed at the
      scope of the management

      group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginWhatIfAtManagementGroupScope(groupId: string,
        deploymentName: string, parameters: ScopedDeploymentWhatIf, options?:
        DeploymentsWhatIfAtManagementGroupScopeOptionalParams):
        Promise<PollerLike<PollOperationState<DeploymentsWhatIfAtManagementGroupScopeResponse>,
        DeploymentsWhatIfAtManagementGroupScopeResponse>>
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.ScopedDeploymentWhatIf" />
          description: Parameters to validate.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsWhatIfAtManagementGroupScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-resources.DeploymentsWhatIfAtManagementGroupScopeResponse"
          />&gt;, <xref
          uid="@azure/arm-resources.DeploymentsWhatIfAtManagementGroupScopeResponse"
          />&gt;&gt;
  - name: >-
      beginWhatIfAtManagementGroupScopeAndWait(string, string,
      ScopedDeploymentWhatIf,
      DeploymentsWhatIfAtManagementGroupScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginWhatIfAtManagementGroupScopeAndWait'
    package: '@azure/arm-resources'
    summary: >-
      Returns changes that will be made by the deployment if executed at the
      scope of the management

      group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginWhatIfAtManagementGroupScopeAndWait(groupId: string,
        deploymentName: string, parameters: ScopedDeploymentWhatIf, options?:
        DeploymentsWhatIfAtManagementGroupScopeOptionalParams):
        Promise<DeploymentsWhatIfAtManagementGroupScopeResponse>
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.ScopedDeploymentWhatIf" />
          description: Parameters to validate.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsWhatIfAtManagementGroupScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsWhatIfAtManagementGroupScopeResponse"
          />&gt;
  - name: >-
      beginWhatIfAtSubscriptionScope(string, DeploymentWhatIf,
      DeploymentsWhatIfAtSubscriptionScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginWhatIfAtSubscriptionScope'
    package: '@azure/arm-resources'
    summary: >-
      Returns changes that will be made by the deployment if executed at the
      scope of the subscription.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginWhatIfAtSubscriptionScope(deploymentName: string,
        parameters: DeploymentWhatIf, options?:
        DeploymentsWhatIfAtSubscriptionScopeOptionalParams):
        Promise<PollerLike<PollOperationState<DeploymentsWhatIfAtSubscriptionScopeResponse>,
        DeploymentsWhatIfAtSubscriptionScopeResponse>>
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.DeploymentWhatIf" />
          description: Parameters to What If.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsWhatIfAtSubscriptionScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-resources.DeploymentsWhatIfAtSubscriptionScopeResponse"
          />&gt;, <xref
          uid="@azure/arm-resources.DeploymentsWhatIfAtSubscriptionScopeResponse"
          />&gt;&gt;
  - name: >-
      beginWhatIfAtSubscriptionScopeAndWait(string, DeploymentWhatIf,
      DeploymentsWhatIfAtSubscriptionScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginWhatIfAtSubscriptionScopeAndWait'
    package: '@azure/arm-resources'
    summary: >-
      Returns changes that will be made by the deployment if executed at the
      scope of the subscription.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginWhatIfAtSubscriptionScopeAndWait(deploymentName: string,
        parameters: DeploymentWhatIf, options?:
        DeploymentsWhatIfAtSubscriptionScopeOptionalParams):
        Promise<DeploymentsWhatIfAtSubscriptionScopeResponse>
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.DeploymentWhatIf" />
          description: Parameters to What If.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsWhatIfAtSubscriptionScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsWhatIfAtSubscriptionScopeResponse"
          />&gt;
  - name: >-
      beginWhatIfAtTenantScope(string, ScopedDeploymentWhatIf,
      DeploymentsWhatIfAtTenantScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginWhatIfAtTenantScope'
    package: '@azure/arm-resources'
    summary: >-
      Returns changes that will be made by the deployment if executed at the
      scope of the tenant group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginWhatIfAtTenantScope(deploymentName: string, parameters:
        ScopedDeploymentWhatIf, options?:
        DeploymentsWhatIfAtTenantScopeOptionalParams):
        Promise<PollerLike<PollOperationState<DeploymentsWhatIfAtTenantScopeResponse>,
        DeploymentsWhatIfAtTenantScopeResponse>>
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.ScopedDeploymentWhatIf" />
          description: Parameters to validate.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsWhatIfAtTenantScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-resources.DeploymentsWhatIfAtTenantScopeResponse"
          />&gt;, <xref
          uid="@azure/arm-resources.DeploymentsWhatIfAtTenantScopeResponse"
          />&gt;&gt;
  - name: >-
      beginWhatIfAtTenantScopeAndWait(string, ScopedDeploymentWhatIf,
      DeploymentsWhatIfAtTenantScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.beginWhatIfAtTenantScopeAndWait'
    package: '@azure/arm-resources'
    summary: >-
      Returns changes that will be made by the deployment if executed at the
      scope of the tenant group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginWhatIfAtTenantScopeAndWait(deploymentName: string,
        parameters: ScopedDeploymentWhatIf, options?:
        DeploymentsWhatIfAtTenantScopeOptionalParams):
        Promise<DeploymentsWhatIfAtTenantScopeResponse>
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.ScopedDeploymentWhatIf" />
          description: Parameters to validate.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsWhatIfAtTenantScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsWhatIfAtTenantScopeResponse"
          />&gt;
  - name: >-
      calculateTemplateHash(Record<string, unknown>,
      DeploymentsCalculateTemplateHashOptionalParams)
    uid: '@azure/arm-resources.Deployments.calculateTemplateHash'
    package: '@azure/arm-resources'
    summary: Calculate the hash of the given template.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function calculateTemplateHash(template: Record<string, unknown>,
        options?: DeploymentsCalculateTemplateHashOptionalParams):
        Promise<DeploymentsCalculateTemplateHashResponse>
      parameters:
        - id: template
          type: 'Record&lt;string, unknown&gt;'
          description: The template provided to calculate hash.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsCalculateTemplateHashOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsCalculateTemplateHashResponse"
          />&gt;
  - name: 'cancel(string, string, DeploymentsCancelOptionalParams)'
    uid: '@azure/arm-resources.Deployments.cancel'
    package: '@azure/arm-resources'
    summary: >-
      You can cancel a deployment only if the provisioningState is Accepted or
      Running. After the

      deployment is canceled, the provisioningState is set to Canceled.
      Canceling a template deployment

      stops the currently running template deployment and leaves the resource
      group partially deployed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancel(resourceGroupName: string, deploymentName: string,
        options?: DeploymentsCancelOptionalParams): Promise<void>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="@azure/arm-resources.DeploymentsCancelOptionalParams" />
          description: |
            The options parameters.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: >-
      cancelAtManagementGroupScope(string, string,
      DeploymentsCancelAtManagementGroupScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.cancelAtManagementGroupScope'
    package: '@azure/arm-resources'
    summary: >-
      You can cancel a deployment only if the provisioningState is Accepted or
      Running. After the

      deployment is canceled, the provisioningState is set to Canceled.
      Canceling a template deployment

      stops the currently running template deployment and leaves the resources
      partially deployed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancelAtManagementGroupScope(groupId: string, deploymentName:
        string, options?:
        DeploymentsCancelAtManagementGroupScopeOptionalParams): Promise<void>
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsCancelAtManagementGroupScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'cancelAtScope(string, string, DeploymentsCancelAtScopeOptionalParams)'
    uid: '@azure/arm-resources.Deployments.cancelAtScope'
    package: '@azure/arm-resources'
    summary: >-
      You can cancel a deployment only if the provisioningState is Accepted or
      Running. After the

      deployment is canceled, the provisioningState is set to Canceled.
      Canceling a template deployment

      stops the currently running template deployment and leaves the resources
      partially deployed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancelAtScope(scope: string, deploymentName: string, options?:
        DeploymentsCancelAtScopeOptionalParams): Promise<void>
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsCancelAtScopeOptionalParams" />
          description: |
            The options parameters.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: >-
      cancelAtSubscriptionScope(string,
      DeploymentsCancelAtSubscriptionScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.cancelAtSubscriptionScope'
    package: '@azure/arm-resources'
    summary: >-
      You can cancel a deployment only if the provisioningState is Accepted or
      Running. After the

      deployment is canceled, the provisioningState is set to Canceled.
      Canceling a template deployment

      stops the currently running template deployment and leaves the resources
      partially deployed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancelAtSubscriptionScope(deploymentName: string, options?:
        DeploymentsCancelAtSubscriptionScopeOptionalParams): Promise<void>
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsCancelAtSubscriptionScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'cancelAtTenantScope(string, DeploymentsCancelAtTenantScopeOptionalParams)'
    uid: '@azure/arm-resources.Deployments.cancelAtTenantScope'
    package: '@azure/arm-resources'
    summary: >-
      You can cancel a deployment only if the provisioningState is Accepted or
      Running. After the

      deployment is canceled, the provisioningState is set to Canceled.
      Canceling a template deployment

      stops the currently running template deployment and leaves the resources
      partially deployed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancelAtTenantScope(deploymentName: string, options?:
        DeploymentsCancelAtTenantScopeOptionalParams): Promise<void>
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsCancelAtTenantScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'checkExistence(string, string, DeploymentsCheckExistenceOptionalParams)'
    uid: '@azure/arm-resources.Deployments.checkExistence'
    package: '@azure/arm-resources'
    summary: Checks whether the deployment exists.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkExistence(resourceGroupName: string, deploymentName:
        string, options?: DeploymentsCheckExistenceOptionalParams):
        Promise<DeploymentsCheckExistenceResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: >-
            The name of the resource group with the deployment to check. The
            name is
                                     case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsCheckExistenceOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsCheckExistenceResponse" />&gt;
  - name: >-
      checkExistenceAtManagementGroupScope(string, string,
      DeploymentsCheckExistenceAtManagementGroupScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.checkExistenceAtManagementGroupScope'
    package: '@azure/arm-resources'
    summary: Checks whether the deployment exists.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkExistenceAtManagementGroupScope(groupId: string,
        deploymentName: string, options?:
        DeploymentsCheckExistenceAtManagementGroupScopeOptionalParams):
        Promise<DeploymentsCheckExistenceAtManagementGroupScopeResponse>
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsCheckExistenceAtManagementGroupScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsCheckExistenceAtManagementGroupScopeResponse"
          />&gt;
  - name: >-
      checkExistenceAtScope(string, string,
      DeploymentsCheckExistenceAtScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.checkExistenceAtScope'
    package: '@azure/arm-resources'
    summary: Checks whether the deployment exists.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkExistenceAtScope(scope: string, deploymentName: string,
        options?: DeploymentsCheckExistenceAtScopeOptionalParams):
        Promise<DeploymentsCheckExistenceAtScopeResponse>
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsCheckExistenceAtScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsCheckExistenceAtScopeResponse"
          />&gt;
  - name: >-
      checkExistenceAtSubscriptionScope(string,
      DeploymentsCheckExistenceAtSubscriptionScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.checkExistenceAtSubscriptionScope'
    package: '@azure/arm-resources'
    summary: Checks whether the deployment exists.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkExistenceAtSubscriptionScope(deploymentName: string,
        options?: DeploymentsCheckExistenceAtSubscriptionScopeOptionalParams):
        Promise<DeploymentsCheckExistenceAtSubscriptionScopeResponse>
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsCheckExistenceAtSubscriptionScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsCheckExistenceAtSubscriptionScopeResponse"
          />&gt;
  - name: >-
      checkExistenceAtTenantScope(string,
      DeploymentsCheckExistenceAtTenantScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.checkExistenceAtTenantScope'
    package: '@azure/arm-resources'
    summary: Checks whether the deployment exists.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkExistenceAtTenantScope(deploymentName: string, options?:
        DeploymentsCheckExistenceAtTenantScopeOptionalParams):
        Promise<DeploymentsCheckExistenceAtTenantScopeResponse>
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsCheckExistenceAtTenantScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsCheckExistenceAtTenantScopeResponse"
          />&gt;
  - name: 'exportTemplate(string, string, DeploymentsExportTemplateOptionalParams)'
    uid: '@azure/arm-resources.Deployments.exportTemplate'
    package: '@azure/arm-resources'
    summary: Exports the template used for specified deployment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exportTemplate(resourceGroupName: string, deploymentName:
        string, options?: DeploymentsExportTemplateOptionalParams):
        Promise<DeploymentsExportTemplateResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsExportTemplateOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsExportTemplateResponse" />&gt;
  - name: >-
      exportTemplateAtManagementGroupScope(string, string,
      DeploymentsExportTemplateAtManagementGroupScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.exportTemplateAtManagementGroupScope'
    package: '@azure/arm-resources'
    summary: Exports the template used for specified deployment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exportTemplateAtManagementGroupScope(groupId: string,
        deploymentName: string, options?:
        DeploymentsExportTemplateAtManagementGroupScopeOptionalParams):
        Promise<DeploymentsExportTemplateAtManagementGroupScopeResponse>
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsExportTemplateAtManagementGroupScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsExportTemplateAtManagementGroupScopeResponse"
          />&gt;
  - name: >-
      exportTemplateAtScope(string, string,
      DeploymentsExportTemplateAtScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.exportTemplateAtScope'
    package: '@azure/arm-resources'
    summary: Exports the template used for specified deployment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exportTemplateAtScope(scope: string, deploymentName: string,
        options?: DeploymentsExportTemplateAtScopeOptionalParams):
        Promise<DeploymentsExportTemplateAtScopeResponse>
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsExportTemplateAtScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsExportTemplateAtScopeResponse"
          />&gt;
  - name: >-
      exportTemplateAtSubscriptionScope(string,
      DeploymentsExportTemplateAtSubscriptionScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.exportTemplateAtSubscriptionScope'
    package: '@azure/arm-resources'
    summary: Exports the template used for specified deployment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exportTemplateAtSubscriptionScope(deploymentName: string,
        options?: DeploymentsExportTemplateAtSubscriptionScopeOptionalParams):
        Promise<DeploymentsExportTemplateAtSubscriptionScopeResponse>
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsExportTemplateAtSubscriptionScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsExportTemplateAtSubscriptionScopeResponse"
          />&gt;
  - name: >-
      exportTemplateAtTenantScope(string,
      DeploymentsExportTemplateAtTenantScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.exportTemplateAtTenantScope'
    package: '@azure/arm-resources'
    summary: Exports the template used for specified deployment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exportTemplateAtTenantScope(deploymentName: string, options?:
        DeploymentsExportTemplateAtTenantScopeOptionalParams):
        Promise<DeploymentsExportTemplateAtTenantScopeResponse>
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsExportTemplateAtTenantScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsExportTemplateAtTenantScopeResponse"
          />&gt;
  - name: 'get(string, string, DeploymentsGetOptionalParams)'
    uid: '@azure/arm-resources.Deployments.get'
    package: '@azure/arm-resources'
    summary: Gets a deployment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(resourceGroupName: string, deploymentName: string,
        options?: DeploymentsGetOptionalParams): Promise<DeploymentsGetResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="@azure/arm-resources.DeploymentsGetOptionalParams" />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/arm-resources.DeploymentsGetResponse"
          />&gt;
  - name: >-
      getAtManagementGroupScope(string, string,
      DeploymentsGetAtManagementGroupScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.getAtManagementGroupScope'
    package: '@azure/arm-resources'
    summary: Gets a deployment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAtManagementGroupScope(groupId: string, deploymentName:
        string, options?: DeploymentsGetAtManagementGroupScopeOptionalParams):
        Promise<DeploymentsGetAtManagementGroupScopeResponse>
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsGetAtManagementGroupScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsGetAtManagementGroupScopeResponse"
          />&gt;
  - name: 'getAtScope(string, string, DeploymentsGetAtScopeOptionalParams)'
    uid: '@azure/arm-resources.Deployments.getAtScope'
    package: '@azure/arm-resources'
    summary: Gets a deployment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAtScope(scope: string, deploymentName: string, options?:
        DeploymentsGetAtScopeOptionalParams):
        Promise<DeploymentsGetAtScopeResponse>
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref uid="@azure/arm-resources.DeploymentsGetAtScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsGetAtScopeResponse" />&gt;
  - name: >-
      getAtSubscriptionScope(string,
      DeploymentsGetAtSubscriptionScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.getAtSubscriptionScope'
    package: '@azure/arm-resources'
    summary: Gets a deployment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAtSubscriptionScope(deploymentName: string, options?:
        DeploymentsGetAtSubscriptionScopeOptionalParams):
        Promise<DeploymentsGetAtSubscriptionScopeResponse>
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsGetAtSubscriptionScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsGetAtSubscriptionScopeResponse"
          />&gt;
  - name: 'getAtTenantScope(string, DeploymentsGetAtTenantScopeOptionalParams)'
    uid: '@azure/arm-resources.Deployments.getAtTenantScope'
    package: '@azure/arm-resources'
    summary: Gets a deployment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAtTenantScope(deploymentName: string, options?:
        DeploymentsGetAtTenantScopeOptionalParams):
        Promise<DeploymentsGetAtTenantScopeResponse>
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsGetAtTenantScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-resources.DeploymentsGetAtTenantScopeResponse" />&gt;
  - name: >-
      listAtManagementGroupScope(string,
      DeploymentsListAtManagementGroupScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.listAtManagementGroupScope'
    package: '@azure/arm-resources'
    summary: Get all the deployments for a management group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtManagementGroupScope(groupId: string, options?:
        DeploymentsListAtManagementGroupScopeOptionalParams):
        PagedAsyncIterableIterator<DeploymentExtended>
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsListAtManagementGroupScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/arm-resources.DeploymentExtended" />&gt;
  - name: 'listAtScope(string, DeploymentsListAtScopeOptionalParams)'
    uid: '@azure/arm-resources.Deployments.listAtScope'
    package: '@azure/arm-resources'
    summary: Get all the deployments at the given scope.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtScope(scope: string, options?:
        DeploymentsListAtScopeOptionalParams):
        PagedAsyncIterableIterator<DeploymentExtended>
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsListAtScopeOptionalParams" />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/arm-resources.DeploymentExtended" />&gt;
  - name: listAtSubscriptionScope(DeploymentsListAtSubscriptionScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.listAtSubscriptionScope'
    package: '@azure/arm-resources'
    summary: Get all the deployments for a subscription.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtSubscriptionScope(options?:
        DeploymentsListAtSubscriptionScopeOptionalParams):
        PagedAsyncIterableIterator<DeploymentExtended>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsListAtSubscriptionScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/arm-resources.DeploymentExtended" />&gt;
  - name: listAtTenantScope(DeploymentsListAtTenantScopeOptionalParams)
    uid: '@azure/arm-resources.Deployments.listAtTenantScope'
    package: '@azure/arm-resources'
    summary: Get all the deployments at the tenant scope.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtTenantScope(options?:
        DeploymentsListAtTenantScopeOptionalParams):
        PagedAsyncIterableIterator<DeploymentExtended>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsListAtTenantScopeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/arm-resources.DeploymentExtended" />&gt;
  - name: 'listByResourceGroup(string, DeploymentsListByResourceGroupOptionalParams)'
    uid: '@azure/arm-resources.Deployments.listByResourceGroup'
    package: '@azure/arm-resources'
    summary: Get all the deployments for a resource group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, options?:
        DeploymentsListByResourceGroupOptionalParams):
        PagedAsyncIterableIterator<DeploymentExtended>
      parameters:
        - id: resourceGroupName
          type: string
          description: >-
            The name of the resource group with the deployments to get. The name
            is
                                     case insensitive.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.DeploymentsListByResourceGroupOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/arm-resources.DeploymentExtended" />&gt;
