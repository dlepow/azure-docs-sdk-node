### YamlMime:TSPackage
uid: '@azure/core-http'
name: '@azure/core-http'
summary: ''
type: package
classes:
  - '@azure/core-http.ExpiringAccessTokenCache'
  - '@azure/core-http.AccessTokenRefresher'
  - '@azure/core-http.ApiKeyCredentials'
  - '@azure/core-http.BasicAuthenticationCredentials'
  - '@azure/core-http.TopicCredentials'
  - '@azure/core-http.HttpHeaders'
  - '@azure/core-http.ConsoleHttpPipelineLogger'
  - '@azure/core-http.NodeFetchHttpClient'
  - '@azure/core-http.ReportTransform'
  - '@azure/core-http.DeserializationPolicy'
  - '@azure/core-http.DisableResponseDecompressionPolicy'
  - '@azure/core-http.ExponentialRetryPolicy'
  - '@azure/core-http.GenerateClientRequestIdPolicy'
  - '@azure/core-http.KeepAlivePolicy'
  - '@azure/core-http.LogPolicy'
  - '@azure/core-http.ProxyPolicy'
  - '@azure/core-http.RedirectPolicy'
  - '@azure/core-http.BaseRequestPolicy'
  - '@azure/core-http.RequestPolicyOptions'
  - '@azure/core-http.RPRegistrationPolicy'
  - '@azure/core-http.SigningPolicy'
  - '@azure/core-http.SystemErrorRetryPolicy'
  - '@azure/core-http.ThrottlingRetryPolicy'
  - '@azure/core-http.TracingPolicy'
  - '@azure/core-http.UserAgentPolicy'
  - '@azure/core-http.RestError'
  - '@azure/core-http.Serializer'
  - '@azure/core-http.ServiceClient'
  - '@azure/core-http.URLBuilder'
  - '@azure/core-http.URLQuery'
  - '@azure/core-http.URLToken'
  - '@azure/core-http.URLTokenizer'
  - '@azure/core-http.Sanitizer'
  - '@azure/core-http.WebResource'
  - '@azure/core-http.XhrHttpClient'
interfaces:
  - '@azure/core-http.AccessTokenCache'
  - '@azure/core-http.ApiKeyCredentialOptions'
  - '@azure/core-http.ServiceClientCredentials'
  - '@azure/core-http.HttpClient'
  - '@azure/core-http.HttpHeader'
  - '@azure/core-http.HttpHeadersLike'
  - '@azure/core-http.HttpOperationResponse'
  - '@azure/core-http.HttpResponse'
  - '@azure/core-http.RestResponse'
  - '@azure/core-http.HttpPipelineLogger'
  - '@azure/core-http.OperationArguments'
  - '@azure/core-http.OperationOptions'
  - '@azure/core-http.OperationRequestOptions'
  - '@azure/core-http.OperationParameter'
  - '@azure/core-http.OperationQueryParameter'
  - '@azure/core-http.OperationURLParameter'
  - '@azure/core-http.OperationResponse'
  - '@azure/core-http.OperationSpec'
  - '@azure/core-http.InternalPipelineOptions'
  - '@azure/core-http.PipelineOptions'
  - '@azure/core-http.TokenCyclerOptions'
  - '@azure/core-http.DeserializationContentTypes'
  - '@azure/core-http.DeserializationOptions'
  - '@azure/core-http.RetryOptions'
  - '@azure/core-http.KeepAliveOptions'
  - '@azure/core-http.LogPolicyOptions'
  - '@azure/core-http.RedirectOptions'
  - '@azure/core-http.RequestPolicy'
  - '@azure/core-http.RequestPolicyOptionsLike'
  - '@azure/core-http.TracingPolicyOptions'
  - '@azure/core-http.UserAgentOptions'
  - '@azure/core-http.BaseMapper'
  - '@azure/core-http.CompositeMapper'
  - '@azure/core-http.CompositeMapperType'
  - '@azure/core-http.DictionaryMapper'
  - '@azure/core-http.DictionaryMapperType'
  - '@azure/core-http.EnumMapper'
  - '@azure/core-http.EnumMapperType'
  - '@azure/core-http.MapperConstraints'
  - '@azure/core-http.PolymorphicDiscriminator'
  - '@azure/core-http.SequenceMapper'
  - '@azure/core-http.SequenceMapperType'
  - '@azure/core-http.SimpleMapperType'
  - '@azure/core-http.UrlParameterValue'
  - '@azure/core-http.ProxySettings'
  - '@azure/core-http.ServiceClientOptions'
  - '@azure/core-http.RetryData'
  - '@azure/core-http.RetryError'
  - '@azure/core-http.SanitizerOptions'
  - '@azure/core-http.SerializerOptions'
  - '@azure/core-http.ServiceCallback'
  - '@azure/core-http.ParameterValue'
  - '@azure/core-http.RequestOptionsBase'
  - '@azure/core-http.RequestPrepareOptions'
  - '@azure/core-http.WebResourceLike'
typeAliases:
  - '@azure/core-http.Authenticator'
  - '@azure/core-http.RawHttpHeaders'
  - '@azure/core-http.CommonRequestInfo'
  - '@azure/core-http.CommonRequestInit'
  - '@azure/core-http.CommonResponse'
  - '@azure/core-http.ParameterPath'
  - '@azure/core-http.RequestPolicyFactory'
  - '@azure/core-http.ResponseHandler'
  - '@azure/core-http.TelemetryInfo'
  - '@azure/core-http.ProxyAgent'
  - '@azure/core-http.Mapper'
  - '@azure/core-http.MapperType'
  - '@azure/core-http.PropertyParent'
  - '@azure/core-http.ProxyOptions'
  - '@azure/core-http.URLTokenType'
  - '@azure/core-http.URLTokenizerState'
  - '@azure/core-http.UnknownObject'
  - '@azure/core-http.HttpMethods'
  - '@azure/core-http.HttpRequestBody'
  - '@azure/core-http.TransferProgressEvent'
functions:
  - name: getCachedDefaultHttpClient()
    uid: '@azure/core-http.getCachedDefaultHttpClient'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getCachedDefaultHttpClient(): HttpClient'
      return:
        description: ''
        type: <xref uid="@azure/core-http.HttpClient" />
  - name: isHttpHeadersLike(unknown)
    uid: '@azure/core-http.isHttpHeadersLike'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function isHttpHeadersLike(object?: unknown): boolean'
      parameters:
        - id: object
          type: unknown
          description: ''
      return:
        description: ''
        type: boolean
  - name: parseHeaders(XMLHttpRequest)
    uid: '@azure/core-http.parseHeaders'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function parseHeaders(xhr: XMLHttpRequest): HttpHeadersLike'
      parameters:
        - id: xhr
          type: XMLHttpRequest
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/core-http.HttpHeadersLike" />
  - name: operationOptionsToRequestOptionsBase<T>(T)
    uid: '@azure/core-http.operationOptionsToRequestOptionsBase'
    package: '@azure/core-http'
    summary: Converts an OperationOptions to a RequestOptionsBase
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function operationOptionsToRequestOptionsBase<T>(opts: T):
        RequestOptionsBase
      parameters:
        - id: opts
          type: T
          description: |
            OperationOptions object to convert to RequestOptionsBase
      return:
        description: ''
        type: <xref uid="@azure/core-http.RequestOptionsBase" />
  - name: getPathStringFromParameter(OperationParameter)
    uid: '@azure/core-http.getPathStringFromParameter'
    package: '@azure/core-http'
    summary: Get the path to this parameter's value as a dotted string (a.b.c).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPathStringFromParameter(parameter: OperationParameter):
        string
      parameters:
        - id: parameter
          type: <xref uid="@azure/core-http.OperationParameter" />
          description: The parameter to get the path string for.
      return:
        description: The path to this parameter's value as a dotted string.
        type: string
  - name: 'getPathStringFromParameterPath(ParameterPath, Mapper)'
    uid: '@azure/core-http.getPathStringFromParameterPath'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPathStringFromParameterPath(parameterPath: ParameterPath,
        mapper: Mapper): string
      parameters:
        - id: parameterPath
          type: <xref uid="@azure/core-http.ParameterPath" />
          description: ''
        - id: mapper
          type: <xref uid="@azure/core-http.Mapper" />
          description: ''
      return:
        description: ''
        type: string
  - name: getStreamResponseStatusCodes(OperationSpec)
    uid: '@azure/core-http.getStreamResponseStatusCodes'
    package: '@azure/core-http'
    summary: Gets the list of status codes for streaming responses.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getStreamResponseStatusCodes(operationSpec: OperationSpec):
        Set<number>
      parameters:
        - id: operationSpec
          type: <xref uid="@azure/core-http.OperationSpec" />
          description: ''
      return:
        description: ''
        type: Set&lt;number&gt;
  - name: 'bearerTokenAuthenticationPolicy(TokenCredential, string | string[])'
    uid: '@azure/core-http.bearerTokenAuthenticationPolicy'
    package: '@azure/core-http'
    summary: |-
      Creates a new factory for a RequestPolicy that applies a bearer token to
      the requests' `Authorization` headers.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function bearerTokenAuthenticationPolicy(credential: TokenCredential,
        scopes: string | string[]): RequestPolicyFactory
      parameters:
        - id: credential
          type: TokenCredential
          description: The TokenCredential implementation that can supply the bearer token.
        - id: scopes
          type: 'string | string[]'
          description: |
            The scopes for which the bearer token applies.
      return:
        description: ''
        type: <xref uid="@azure/core-http.RequestPolicyFactory" />
  - name: 'deserializationPolicy(DeserializationContentTypes, SerializerOptions)'
    uid: '@azure/core-http.deserializationPolicy'
    package: '@azure/core-http'
    summary: >-
      Create a new serialization RequestPolicyCreator that will serialized HTTP
      request bodies as they

      pass through the HTTP pipeline.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deserializationPolicy(deserializationContentTypes?:
        DeserializationContentTypes, parsingOptions?: SerializerOptions):
        RequestPolicyFactory
      parameters:
        - id: deserializationContentTypes
          type: <xref uid="@azure/core-http.DeserializationContentTypes" />
          description: ''
        - id: parsingOptions
          type: <xref uid="@azure/core-http.SerializerOptions" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/core-http.RequestPolicyFactory" />
  - name: >-
      deserializeResponseBody(string[], string[], HttpOperationResponse,
      SerializerOptions)
    uid: '@azure/core-http.deserializeResponseBody'
    package: '@azure/core-http'
    summary: >-
      Given a particular set of content types to parse as either JSON or XML,
      consumes the HTTP response to produce the result object defined by the
      request's <xref:@azure/core-http.OperationSpec>.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deserializeResponseBody(jsonContentTypes: string[],
        xmlContentTypes: string[], response: HttpOperationResponse, options?:
        SerializerOptions): Promise<HttpOperationResponse>
      parameters:
        - id: jsonContentTypes
          type: 'string[]'
          description: Response content types to parse the body as JSON.
        - id: xmlContentTypes
          type: 'string[]'
          description: Response content types to parse the body as XML.
        - id: response
          type: <xref uid="@azure/core-http.HttpOperationResponse" />
          description: HTTP Response from the pipeline.
        - id: options
          type: <xref uid="@azure/core-http.SerializerOptions" />
          description: >-
            Options to the serializer, mostly for configuring the XML parser if
            needed.
      return:
        description: >-
          A parsed {@link HttpOperationResponse} object that can be returned by
          the {@link ServiceClient}.
        type: Promise&lt;<xref uid="@azure/core-http.HttpOperationResponse" />&gt;
  - name: disableResponseDecompressionPolicy()
    uid: '@azure/core-http.disableResponseDecompressionPolicy'
    package: '@azure/core-http'
    summary: |-
      Returns a request policy factory that can be used to create an instance of
      <xref:@azure/core-http.DisableResponseDecompressionPolicy>.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function disableResponseDecompressionPolicy(): RequestPolicyFactory'
      return:
        description: ''
        type: <xref uid="@azure/core-http.RequestPolicyFactory" />
  - name: 'exponentialRetryPolicy(number, number, number)'
    uid: '@azure/core-http.exponentialRetryPolicy'
    package: '@azure/core-http'
    summary: >-
      Policy that retries the request as many times as configured for as long as
      the max retry time interval specified, each retry waiting longer to begin
      than the last time.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exponentialRetryPolicy(retryCount?: number, retryInterval?:
        number, maxRetryInterval?: number): RequestPolicyFactory
      parameters:
        - id: retryCount
          type: number
          description: Maximum number of retries.
        - id: retryInterval
          type: number
          description: Base time between retries.
        - id: maxRetryInterval
          type: number
          description: |
            Maximum time to wait between retries.
      return:
        description: ''
        type: <xref uid="@azure/core-http.RequestPolicyFactory" />
  - name: generateClientRequestIdPolicy(string)
    uid: '@azure/core-http.generateClientRequestIdPolicy'
    package: '@azure/core-http'
    summary: Creates a policy that assigns a unique request id to outgoing requests.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function generateClientRequestIdPolicy(requestIdHeaderName?: string):
        RequestPolicyFactory
      parameters:
        - id: requestIdHeaderName
          type: string
          description: >
            The name of the header to use when assigning the unique id to the
            request.
      return:
        description: ''
        type: <xref uid="@azure/core-http.RequestPolicyFactory" />
  - name: keepAlivePolicy(KeepAliveOptions)
    uid: '@azure/core-http.keepAlivePolicy'
    package: '@azure/core-http'
    summary: >-
      Creates a policy that controls whether HTTP connections are maintained on
      future requests.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function keepAlivePolicy(keepAliveOptions?: KeepAliveOptions):
        RequestPolicyFactory
      parameters:
        - id: keepAliveOptions
          type: <xref uid="@azure/core-http.KeepAliveOptions" />
          description: >-
            Keep alive options. By default, HTTP connections are maintained for
            future requests.
      return:
        description: 'An instance of the {@link KeepAlivePolicy}'
        type: <xref uid="@azure/core-http.RequestPolicyFactory" />
  - name: logPolicy(LogPolicyOptions)
    uid: '@azure/core-http.logPolicy'
    package: '@azure/core-http'
    summary: >-
      Creates a policy that logs information about the outgoing request and the
      incoming responses.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function logPolicy(loggingOptions?: LogPolicyOptions):
        RequestPolicyFactory
      parameters:
        - id: loggingOptions
          type: <xref uid="@azure/core-http.LogPolicyOptions" />
          description: Logging options.
      return:
        description: 'An instance of the {@link LogPolicy}'
        type: <xref uid="@azure/core-http.RequestPolicyFactory" />
  - name: getDefaultUserAgentKey()
    uid: '@azure/core-http.getDefaultUserAgentKey'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getDefaultUserAgentKey(): string'
      return:
        description: ''
        type: string
  - name: getPlatformSpecificData()
    uid: '@azure/core-http.getPlatformSpecificData'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getPlatformSpecificData(): TelemetryInfo[]'
      return:
        description: ''
        type: '<xref uid="@azure/core-http.TelemetryInfo" />[]'
  - name: ndJsonPolicy()
    uid: '@azure/core-http.ndJsonPolicy'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function ndJsonPolicy(): RequestPolicyFactory'
      return:
        description: ''
        type: <xref uid="@azure/core-http.RequestPolicyFactory" />
  - name: getDefaultProxySettings(string)
    uid: '@azure/core-http.getDefaultProxySettings'
    package: '@azure/core-http'
    summary: >-
      Converts a given URL of a proxy server into `ProxySettings` or attempts to
      retrieve `ProxySettings` from the current environment if one is not
      passed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getDefaultProxySettings(proxyUrl?: string): ProxySettings |
        undefined
      parameters:
        - id: proxyUrl
          type: string
          description: URL of the proxy
      return:
        description: 'The default proxy settings, or undefined.'
        type: <xref uid="@azure/core-http.ProxySettings" /> | undefined
  - name: 'proxyPolicy(ProxySettings, { customNoProxyList?: string[] })'
    uid: '@azure/core-http.proxyPolicy'
    package: '@azure/core-http'
    summary: |-
      A policy that allows one to apply proxy settings to all requests.
      If not passed static settings, they will be retrieved from the HTTPS_PROXY
      or HTTP_PROXY environment variables.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function proxyPolicy(proxySettings?: ProxySettings, options?: {
        customNoProxyList?: string[] }): RequestPolicyFactory
      parameters:
        - id: proxySettings
          type: <xref uid="@azure/core-http.ProxySettings" />
          description: ProxySettings to use on each request.
        - id: options
          type: '{ customNoProxyList?: string[] }'
          description: |
            additional settings, for example, custom NO_PROXY patterns
      return:
        description: ''
        type: <xref uid="@azure/core-http.RequestPolicyFactory" />
  - name: loadNoProxy()
    uid: '@azure/core-http.loadNoProxy'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function loadNoProxy(): string[]'
      return:
        description: ''
        type: 'string[]'
  - name: redirectPolicy(number)
    uid: '@azure/core-http.redirectPolicy'
    package: '@azure/core-http'
    summary: >-
      Creates a redirect policy, which sends a repeats the request to a new
      destination if a response arrives with a "location" header, and a status
      code between 300 and 307.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function redirectPolicy(maximumRetries?: number): RequestPolicyFactory'
      parameters:
        - id: maximumRetries
          type: number
          description: Maximum number of redirects to follow.
      return:
        description: 'An instance of the {@link RedirectPolicy}'
        type: <xref uid="@azure/core-http.RequestPolicyFactory" />
  - name: rpRegistrationPolicy(number)
    uid: '@azure/core-http.rpRegistrationPolicy'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function rpRegistrationPolicy(retryTimeout?: number):
        RequestPolicyFactory
      parameters:
        - id: retryTimeout
          type: number
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/core-http.RequestPolicyFactory" />
  - name: signingPolicy(ServiceClientCredentials)
    uid: '@azure/core-http.signingPolicy'
    package: '@azure/core-http'
    summary: >-
      Creates a policy that signs outgoing requests by calling to the provided
      `authenticationProvider`'s `signRequest` method.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function signingPolicy(authenticationProvider:
        ServiceClientCredentials): RequestPolicyFactory
      parameters:
        - id: authenticationProvider
          type: <xref uid="@azure/core-http.ServiceClientCredentials" />
          description: The authentication provider.
      return:
        description: 'An instance of the {@link SigningPolicy}.'
        type: <xref uid="@azure/core-http.RequestPolicyFactory" />
  - name: 'systemErrorRetryPolicy(number, number, number, number)'
    uid: '@azure/core-http.systemErrorRetryPolicy'
    package: '@azure/core-http'
    summary: >-
      A policy that retries when there's a system error, identified by the codes
      "ETIMEDOUT", "ESOCKETTIMEDOUT", "ECONNREFUSED", "ECONNRESET" or "ENOENT".
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function systemErrorRetryPolicy(retryCount?: number, retryInterval?:
        number, minRetryInterval?: number, maxRetryInterval?: number):
        RequestPolicyFactory
      parameters:
        - id: retryCount
          type: number
          description: Maximum number of retries.
        - id: retryInterval
          type: number
          description: 'The client retry interval, in milliseconds.'
        - id: minRetryInterval
          type: number
          description: 'The minimum retry interval, in milliseconds.'
        - id: maxRetryInterval
          type: number
          description: 'The maximum retry interval, in milliseconds.'
      return:
        description: 'An instance of the {@link SystemErrorRetryPolicy}'
        type: <xref uid="@azure/core-http.RequestPolicyFactory" />
  - name: throttlingRetryPolicy()
    uid: '@azure/core-http.throttlingRetryPolicy'
    package: '@azure/core-http'
    summary: >-
      Creates a policy that re-sends the request if the response indicates the
      request failed because of throttling reasons.

      For example, if the response contains a `Retry-After` header, it will
      retry sending the request based on the value of that header.

      To learn more, please refer to

      https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,

      https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits
      and

      https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function throttlingRetryPolicy(): RequestPolicyFactory'
      return:
        description: ''
        type: <xref uid="@azure/core-http.RequestPolicyFactory" />
  - name: tracingPolicy(TracingPolicyOptions)
    uid: '@azure/core-http.tracingPolicy'
    package: '@azure/core-http'
    summary: Creates a policy that wraps outgoing requests with a tracing span.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function tracingPolicy(tracingOptions?: TracingPolicyOptions):
        RequestPolicyFactory
      parameters:
        - id: tracingOptions
          type: <xref uid="@azure/core-http.TracingPolicyOptions" />
          description: Tracing options.
      return:
        description: 'An instance of the {@link TracingPolicy} class.'
        type: <xref uid="@azure/core-http.RequestPolicyFactory" />
  - name: getDefaultUserAgentValue()
    uid: '@azure/core-http.getDefaultUserAgentValue'
    package: '@azure/core-http'
    summary: >-
      The default approach to generate user agents.

      Uses static information from this package, plus system information
      available from the runtime.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getDefaultUserAgentValue(): string'
      return:
        description: ''
        type: string
  - name: userAgentPolicy(TelemetryInfo)
    uid: '@azure/core-http.userAgentPolicy'
    package: '@azure/core-http'
    summary: >-
      Returns a policy that adds the user agent header to outgoing requests
      based on the given <xref:@azure/core-http.TelemetryInfo>.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function userAgentPolicy(userAgentData?: TelemetryInfo):
        RequestPolicyFactory
      parameters:
        - id: userAgentData
          type: <xref uid="@azure/core-http.TelemetryInfo" />
          description: Telemetry information.
      return:
        description: 'A new {@link UserAgentPolicy}.'
        type: <xref uid="@azure/core-http.RequestPolicyFactory" />
  - name: 'createProxyAgent(string, ProxySettings, HttpHeadersLike)'
    uid: '@azure/core-http.createProxyAgent'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createProxyAgent(requestUrl: string, proxySettings:
        ProxySettings, headers?: HttpHeadersLike): ProxyAgent
      parameters:
        - id: requestUrl
          type: string
          description: ''
        - id: proxySettings
          type: <xref uid="@azure/core-http.ProxySettings" />
          description: ''
        - id: headers
          type: <xref uid="@azure/core-http.HttpHeadersLike" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/core-http.ProxyAgent" />
  - name: 'createTunnel(boolean, boolean, HttpsOverHttpsOptions)'
    uid: '@azure/core-http.createTunnel'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createTunnel(isRequestHttps: boolean, isProxyHttps: boolean,
        tunnelOptions: HttpsOverHttpsOptions): Agent | Agent
      parameters:
        - id: isRequestHttps
          type: boolean
          description: ''
        - id: isProxyHttps
          type: boolean
          description: ''
        - id: tunnelOptions
          type: HttpsOverHttpsOptions
          description: ''
      return:
        description: ''
        type: Agent | Agent
  - name: isUrlHttps(string)
    uid: '@azure/core-http.isUrlHttps'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function isUrlHttps(url: string): boolean'
      parameters:
        - id: url
          type: string
          description: ''
      return:
        description: ''
        type: boolean
  - name: serializeObject(unknown)
    uid: '@azure/core-http.serializeObject'
    package: '@azure/core-http'
    summary: >-
      Utility function that serializes an object that might contain binary
      information into a plain object, array or a string.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function serializeObject(toSerialize: unknown): any'
      parameters:
        - id: toSerialize
          type: unknown
          description: ''
      return:
        description: ''
        type: any
  - name: 'createPipelineFromOptions(InternalPipelineOptions, RequestPolicyFactory)'
    uid: '@azure/core-http.createPipelineFromOptions'
    package: '@azure/core-http'
    summary: Creates an HTTP pipeline based on the given options.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createPipelineFromOptions(pipelineOptions:
        InternalPipelineOptions, authPolicyFactory?: RequestPolicyFactory):
        ServiceClientOptions
      parameters:
        - id: pipelineOptions
          type: <xref uid="@azure/core-http.InternalPipelineOptions" />
          description: >-
            Defines options that are used to configure policies in the HTTP
            pipeline for an SDK client.
        - id: authPolicyFactory
          type: <xref uid="@azure/core-http.RequestPolicyFactory" />
          description: >-
            An optional authentication policy factory to use for signing
            requests.
      return:
        description: >-
          A set of options that can be passed to create a new {@link
          ServiceClient}.
        type: <xref uid="@azure/core-http.ServiceClientOptions" />
  - name: 'flattenResponse(HttpOperationResponse, OperationResponse | undefined)'
    uid: '@azure/core-http.flattenResponse'
    package: '@azure/core-http'
    summary: >-
      Parses an <xref:@azure/core-http.HttpOperationResponse> into a normalized
      HTTP response object (<xref:@azure/core-http.RestResponse>).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function flattenResponse(_response: HttpOperationResponse, responseSpec:
        OperationResponse | undefined): RestResponse
      parameters:
        - id: _response
          type: <xref uid="@azure/core-http.HttpOperationResponse" />
          description: Wrapper object for http response.
        - id: responseSpec
          type: <xref uid="@azure/core-http.OperationResponse" /> | undefined
          description: Mappers for how to parse the response properties.
      return:
        description: '- A normalized response object.'
        type: <xref uid="@azure/core-http.RestResponse" />
  - name: >-
      getOperationArgumentValueFromParameterPath(ServiceClient,
      OperationArguments, ParameterPath, Mapper, Serializer)
    uid: '@azure/core-http.getOperationArgumentValueFromParameterPath'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getOperationArgumentValueFromParameterPath(serviceClient:
        ServiceClient, operationArguments: OperationArguments, parameterPath:
        ParameterPath, parameterMapper: Mapper, serializer: Serializer): any
      parameters:
        - id: serviceClient
          type: <xref uid="@azure/core-http.ServiceClient" />
          description: ''
        - id: operationArguments
          type: <xref uid="@azure/core-http.OperationArguments" />
          description: ''
        - id: parameterPath
          type: <xref uid="@azure/core-http.ParameterPath" />
          description: ''
        - id: parameterMapper
          type: <xref uid="@azure/core-http.Mapper" />
          description: ''
        - id: serializer
          type: <xref uid="@azure/core-http.Serializer" />
          description: ''
      return:
        description: ''
        type: any
  - name: 'getPropertyParent(PropertyParent, string[])'
    uid: '@azure/core-http.getPropertyParent'
    package: '@azure/core-http'
    summary: >-
      Get the property parent for the property at the provided path when
      starting with the provided

      parent object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPropertyParent(parent: PropertyParent, propertyPath:
        string[]): PropertyParent
      parameters:
        - id: parent
          type: <xref uid="@azure/core-http.PropertyParent" />
          description: ''
        - id: propertyPath
          type: 'string[]'
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/core-http.PropertyParent" />
  - name: >-
      serializeRequestBody(ServiceClient, WebResourceLike, OperationArguments,
      OperationSpec)
    uid: '@azure/core-http.serializeRequestBody'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function serializeRequestBody(serviceClient: ServiceClient, httpRequest:
        WebResourceLike, operationArguments: OperationArguments, operationSpec:
        OperationSpec)
      parameters:
        - id: serviceClient
          type: <xref uid="@azure/core-http.ServiceClient" />
          description: ''
        - id: httpRequest
          type: <xref uid="@azure/core-http.WebResourceLike" />
          description: ''
        - id: operationArguments
          type: <xref uid="@azure/core-http.OperationArguments" />
          description: ''
        - id: operationSpec
          type: <xref uid="@azure/core-http.OperationSpec" />
          description: ''
  - name: isAlphaNumericCharacter(string)
    uid: '@azure/core-http.isAlphaNumericCharacter'
    package: '@azure/core-http'
    summary: >-
      Get whether or not the provided character (single character string) is an
      alphanumeric (letter or

      digit) character.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function isAlphaNumericCharacter(character: string): boolean'
      parameters:
        - id: character
          type: string
          description: ''
      return:
        description: ''
        type: boolean
  - name: decodeString(string)
    uid: '@azure/core-http.decodeString'
    package: '@azure/core-http'
    summary: Decodes a base64 string into a byte array.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function decodeString(value: string): Uint8Array'
      parameters:
        - id: value
          type: string
          description: |
            The base64 string to decode
      return:
        description: ''
        type: Uint8Array
  - name: encodeByteArray(Uint8Array)
    uid: '@azure/core-http.encodeByteArray'
    package: '@azure/core-http'
    summary: Encodes a byte array in base64 format.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function encodeByteArray(value: Uint8Array): string'
      parameters:
        - id: value
          type: Uint8Array
          description: |
            The Uint8Aray to encode
      return:
        description: ''
        type: string
  - name: encodeString(string)
    uid: '@azure/core-http.encodeString'
    package: '@azure/core-http'
    summary: Encodes a string in base64 format.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function encodeString(value: string): string'
      parameters:
        - id: value
          type: string
          description: |
            The string to encode
      return:
        description: ''
        type: string
  - name: >-
      delay<T>(number, T, { abortErrorMsg?: string, abortSignal?:
      AbortSignalLike })
    uid: '@azure/core-http.delay'
    package: '@azure/core-http'
    summary: >-
      A wrapper for setTimeout that resolves a promise after delayInMs
      milliseconds.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function delay<T>(delayInMs: number, value?: T, options?: {
        abortErrorMsg?: string, abortSignal?: AbortSignalLike }): Promise<T |
        void>
      parameters:
        - id: delayInMs
          type: number
          description: The number of milliseconds to be delayed.
        - id: value
          type: T
          description: The value to be resolved with after a timeout of t milliseconds.
        - id: options
          type: '{ abortErrorMsg?: string, abortSignal?: AbortSignalLike }'
          description: |-
            The options for delay - currently abort options
              @param abortSignal - The abortSignal associated with containing operation.
              @param abortErrorMsg - The abort error message associated with containing operation.
      return:
        description: '- Resolved promise'
        type: Promise&lt;T | void&gt;
  - name: isNumber(unknown)
    uid: '@azure/core-http.isNumber'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function isNumber(n: unknown): boolean'
      parameters:
        - id: 'n'
          type: unknown
          description: ''
      return:
        description: ''
        type: boolean
  - name: >-
      shouldRetry(number, (response?: HttpOperationResponse, error?: RetryError)
      => boolean, RetryData, HttpOperationResponse, RetryError)
    uid: '@azure/core-http.shouldRetry'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function shouldRetry(retryLimit: number, predicate: (response?:
        HttpOperationResponse, error?: RetryError) => boolean, retryData:
        RetryData, response?: HttpOperationResponse, error?: RetryError):
        boolean
      parameters:
        - id: retryLimit
          type: number
          description: Specifies the max number of retries.
        - id: predicate
          type: '(response?: HttpOperationResponse, error?: RetryError) =&gt; boolean'
          description: >-
            Initial chekck on whether to retry based on given responses or
            errors
        - id: retryData
          type: <xref uid="@azure/core-http.RetryData" />
          description: The retry data.
        - id: response
          type: <xref uid="@azure/core-http.HttpOperationResponse" />
          description: ''
        - id: error
          type: <xref uid="@azure/core-http.RetryError" />
          description: ''
      return:
        description: True if the operation qualifies for a retry; false otherwise.
        type: boolean
  - name: >-
      updateRetryData({ maxRetryInterval: number, minRetryInterval: number,
      retryInterval: number }, RetryData, RetryError)
    uid: '@azure/core-http.updateRetryData'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateRetryData(retryOptions: { maxRetryInterval: number,
        minRetryInterval: number, retryInterval: number }, retryData?:
        RetryData, err?: RetryError): RetryData
      parameters:
        - id: retryOptions
          type: >-
            { maxRetryInterval: number, minRetryInterval: number, retryInterval:
            number }
          description: 'specifies retry interval, and its lower bound and upper bound.'
        - id: retryData
          type: <xref uid="@azure/core-http.RetryData" />
          description: The retry data.
        - id: err
          type: <xref uid="@azure/core-http.RetryError" />
          description: |
            The operation"s error, if any.
      return:
        description: ''
        type: <xref uid="@azure/core-http.RetryData" />
  - name: isDefined<T>(T | undefined | null)
    uid: '@azure/core-http.isDefined'
    package: '@azure/core-http'
    summary: Helper TypeGuard that checks if the value is not null or undefined.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function isDefined<T>(thing: T | undefined | null): boolean'
      parameters:
        - id: thing
          type: T | undefined | null
          description: Anything
      return:
        description: ''
        type: boolean
  - name: 'applyMixins(unknown, any[])'
    uid: '@azure/core-http.applyMixins'
    package: '@azure/core-http'
    summary: >-
      Applies the properties on the prototype of sourceCtors to the prototype of
      targetCtor
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function applyMixins(targetCtorParam: unknown, sourceCtors: any[])'
      parameters:
        - id: targetCtorParam
          type: unknown
          description: ''
        - id: sourceCtors
          type: 'any[]'
          description: >
            An array of source objects from which the properties need to be
            taken.
  - name: encodeUri(string)
    uid: '@azure/core-http.encodeUri'
    package: '@azure/core-http'
    summary: Encodes an URI.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function encodeUri(uri: string): string'
      parameters:
        - id: uri
          type: string
          description: The URI to be encoded.
      return:
        description: The encoded URI.
        type: string
  - name: 'executePromisesSequentially(Array<any>, unknown)'
    uid: '@azure/core-http.executePromisesSequentially'
    package: '@azure/core-http'
    summary: >-
      Executes an array of promises sequentially. Inspiration of this method is
      here:

      https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html. An
      awesome blog on promises!
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function executePromisesSequentially(promiseFactories: Array<any>,
        kickstart: unknown): Promise<any>
      parameters:
        - id: promiseFactories
          type: Array&lt;any&gt;
          description: An array of promise factories(A function that return a promise)
        - id: kickstart
          type: unknown
          description: >-
            Input to the first promise that is used to kickstart the promise
            chain.

            If not provided then the promise chain starts with undefined.
      return:
        description: A chain of resolved or rejected promises
        type: Promise&lt;any&gt;
  - name: generateUuid()
    uid: '@azure/core-http.generateUuid'
    package: '@azure/core-http'
    summary: Generated UUID
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function generateUuid(): string'
      return:
        description: RFC4122 v4 UUID.
        type: string
  - name: getEnvironmentValue(string)
    uid: '@azure/core-http.getEnvironmentValue'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getEnvironmentValue(name: string): string | undefined'
      parameters:
        - id: name
          type: string
          description: ''
      return:
        description: ''
        type: string | undefined
  - name: isDuration(string)
    uid: '@azure/core-http.isDuration'
    package: '@azure/core-http'
    summary: Indicates whether the given string is in ISO 8601 format.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function isDuration(value: string): boolean'
      parameters:
        - id: value
          type: string
          description: The value to be validated for ISO 8601 duration format.
      return:
        description: '`true` if valid, `false` otherwise.'
        type: boolean
  - name: isObject(unknown)
    uid: '@azure/core-http.isObject'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function isObject(input: unknown): boolean'
      parameters:
        - id: input
          type: unknown
          description: ''
      return:
        description: >-
          true when input is an object type that is not null, Array, RegExp, or
          Date.
        type: boolean
  - name: isPrimitiveType(unknown)
    uid: '@azure/core-http.isPrimitiveType'
    package: '@azure/core-http'
    summary: |-
      Determines whether the given entity is a basic/primitive type
      (string, number, boolean, null, undefined).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function isPrimitiveType(value: unknown): boolean'
      parameters:
        - id: value
          type: unknown
          description: Any entity
      return:
        description: 'true is it is primitive type, false otherwise.'
        type: boolean
  - name: isValidUuid(string)
    uid: '@azure/core-http.isValidUuid'
    package: '@azure/core-http'
    summary: Validates the given uuid as a string
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function isValidUuid(uuid: string): boolean'
      parameters:
        - id: uuid
          type: string
          description: The uuid as a string that needs to be validated
      return:
        description: True if the uuid is valid; false otherwise.
        type: boolean
  - name: 'prepareXMLRootList(unknown, string, string, string)'
    uid: '@azure/core-http.prepareXMLRootList'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function prepareXMLRootList(obj: unknown, elementName: string,
        xmlNamespaceKey?: string, xmlNamespace?: string): [key: string]: any
      parameters:
        - id: obj
          type: unknown
          description: ''
        - id: elementName
          type: string
          description: ''
        - id: xmlNamespaceKey
          type: string
          description: ''
        - id: xmlNamespace
          type: string
          description: ''
      return:
        description: ''
        type: '[key: string]\: any'
  - name: promiseToCallback(Promise<any>)
    uid: '@azure/core-http.promiseToCallback'
    package: '@azure/core-http'
    summary: Converts a Promise to a callback.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: generated code should instead depend on responseToBody
    syntax:
      content: >-
        function promiseToCallback(promise: Promise<any>): (cb: Function) =>
        void
      parameters:
        - id: promise
          type: Promise&lt;any&gt;
          description: The Promise to be converted to a callback
      return:
        description: 'A function that takes the callback `(cb: Function) => void`'
        type: '(cb: Function) =&gt; void'
  - name: promiseToServiceCallback<T>(Promise<HttpOperationResponse>)
    uid: '@azure/core-http.promiseToServiceCallback'
    package: '@azure/core-http'
    summary: Converts a Promise to a service callback.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function promiseToServiceCallback<T>(promise:
        Promise<HttpOperationResponse>): (cb: ServiceCallback<T>) => void
      parameters:
        - id: promise
          type: Promise&lt;<xref uid="@azure/core-http.HttpOperationResponse" />&gt;
          description: >-
            The Promise of HttpOperationResponse to be converted to a service
            callback
      return:
        description: >-
          A function that takes the service callback (cb: ServiceCallback<T>):
          void
        type: '(cb: ServiceCallback&lt;T&gt;) =&gt; void'
  - name: 'replaceAll(string | undefined, string, string)'
    uid: '@azure/core-http.replaceAll'
    package: '@azure/core-http'
    summary: >-
      Replace all of the instances of searchValue in value with the provided
      replaceValue.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function replaceAll(value: string | undefined, searchValue: string,
        replaceValue: string): string | undefined
      parameters:
        - id: value
          type: string | undefined
          description: The value to search and replace in.
        - id: searchValue
          type: string
          description: The value to search for in the value argument.
        - id: replaceValue
          type: string
          description: The value to replace searchValue with in the value argument.
      return:
        description: >-
          The value where each instance of searchValue was replaced with
          replacedValue.
        type: string | undefined
  - name: stripRequest(WebResourceLike)
    uid: '@azure/core-http.stripRequest'
    package: '@azure/core-http'
    summary: |-
      Returns a stripped version of the Http Request that does not contain the
      Authorization header.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function stripRequest(request: WebResourceLike): WebResourceLike'
      parameters:
        - id: request
          type: <xref uid="@azure/core-http.WebResourceLike" />
          description: The Http Request object
      return:
        description: The stripped version of Http Request.
        type: <xref uid="@azure/core-http.WebResourceLike" />
  - name: stripResponse(HttpOperationResponse)
    uid: '@azure/core-http.stripResponse'
    package: '@azure/core-http'
    summary: |-
      Returns a stripped version of the Http Response which only contains body,
      headers and the status.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function stripResponse(response: HttpOperationResponse): any'
      parameters:
        - id: response
          type: <xref uid="@azure/core-http.HttpOperationResponse" />
          description: The Http Response
      return:
        description: The stripped version of Http Response.
        type: any
  - name: 'urlIsHTTPS({ protocol: string })'
    uid: '@azure/core-http.urlIsHTTPS'
    package: '@azure/core-http'
    summary: Checks if a parsed URL is HTTPS
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function urlIsHTTPS(urlToCheck: { protocol: string }): boolean'
      parameters:
        - id: urlToCheck
          type: '{ protocol: string }'
          description: The url to check
      return:
        description: True if the URL is HTTPS; false otherwise.
        type: boolean
  - name: 'parseXML(string, SerializerOptions)'
    uid: '@azure/core-http.parseXML'
    package: '@azure/core-http'
    summary: Converts given XML string into JSON
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function parseXML(str: string, opts?: SerializerOptions): Promise<any>'
      parameters:
        - id: str
          type: string
          description: String containing the XML content to be parsed into JSON
        - id: opts
          type: <xref uid="@azure/core-http.SerializerOptions" />
          description: |
            Options that govern the parsing of given xml string
      return:
        description: ''
        type: Promise&lt;any&gt;
  - name: 'stringifyXML(unknown, SerializerOptions)'
    uid: '@azure/core-http.stringifyXML'
    package: '@azure/core-http'
    summary: Converts given JSON object to XML string
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function stringifyXML(obj: unknown, opts?: SerializerOptions): string'
      parameters:
        - id: obj
          type: unknown
          description: JSON object to be converted into XML string
        - id: opts
          type: <xref uid="@azure/core-http.SerializerOptions" />
          description: |
            Options that govern the parsing of given JSON object
      return:
        description: ''
        type: string
  - name: isWebResourceLike(unknown)
    uid: '@azure/core-http.isWebResourceLike'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function isWebResourceLike(object: unknown): boolean'
      parameters:
        - id: object
          type: unknown
          description: ''
      return:
        description: ''
        type: boolean
enums:
  - '@azure/core-http.HttpPipelineLogLevel'
  - '@azure/core-http.RetryMode'
  - '@azure/core-http.QueryCollectionFormat'
