### YamlMime:TSType
name: DocumentAnalysisClient
uid: '@azure/ai-form-recognizer.DocumentAnalysisClient'
package: '@azure/ai-form-recognizer'
summary: >
  A client for interacting with the Form Recognizer service's analysis features.

  ### Examples:


  The Form Recognizer service and clients support two means of authentication:


  #### Azure Active Directory


  ```javascript

  import { DocumentAnalysisClient } from "@azure/ai-form-recognizer";

  import { DefaultAzureCredential } from "@azure/identity";


  const endpoint = "https://<resource name>.cognitiveservices.azure.com";

  const credential = new DefaultAzureCredential();


  const client = new DocumentAnalysisClient(endpoint, credential);

  ```


  #### API Key (Subscription Key)


  ```javascript

  import { DocumentAnalysisClient, AzureKeyCredential } from
  "@azure/ai-form-recognizer";


  const endpoint = "https://<resource name>.cognitiveservices.azure.com";

  const credential = new AzureKeyCredential("<api key>");


  const client = new DocumentAnalysisClient(endpoint, credential);

  ```
fullName: DocumentAnalysisClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
methods:
  - name: >-
      beginAnalyzeDocument(string, string | FormRecognizerRequestBody,
      AnalyzeDocumentOptions)
    uid: '@azure/ai-form-recognizer.DocumentAnalysisClient.beginAnalyzeDocument'
    package: '@azure/ai-form-recognizer'
    summary: >+
      Extract data from an input using a model given by its unique ID.

      This operation supports custom as well as prebuilt models. For example, to
      use the prebuilt invoice model, provide

      the model ID "prebuilt-invoice", or to use the simpler prebuilt layout
      model, provide the model ID

      "prebuilt-layout".


      The fields produced in the `AnalyzeResponse` depend on the model that is
      used for analysis, and the values in any

      extracted documents' fields depend on the document types in the model (if
      any) and their corresponding field

      schemas.


      ### Examples


      This method supports both URLs (string) and streamable request bodies
      (<xref:@azure/ai-form-recognizer.FormRecognizerRequestBody>) such as

      Node.JS `ReadableStream` objects, browser `Blob`s, and `ArrayBuffer`s.


      #### From URL


      The Form Recognizer service will attempt to download a file using the
      submitted URL, so the URL must be accessible

      from the public internet. For example, a SAS token can be used to grant
      read access to a blob in Azure Storage, and

      the service will use the SAS-encoded URL to request the file.


      ```javascript

      // the URL must be publicly accessible

      const url = "<receipt document url>";


      // The model that is passed to the following function call determines the
      type of the eventual result. In the

      // example, we will use the prebuilt receipt model, but you could use a
      custom model ID/name instead.

      const poller = await client.beginAnalyzeDocuments("prebuilt-receipt",
      url);


      // The result is a long-running operation (poller), which must itself be
      polled until the operation completes

      const {
        pages, // pages extracted from the document, which contain lines and words
        tables, // extracted tables, organized into cells that contain their contents
        styles, // text styles (ex. handwriting) that were observed in the document
        keyValuePairs, // extracted pairs of elements  (directed associations from one element in the input to another)
        entities, // extracted entities in the input's content, which are categorized (ex. "Location" or "Organization")
        documents // extracted documents (instances of one of the model's document types and its field schema)
      } = await poller.pollUntilDone();


      // Extract the fields of the first document. These fields constitute a
      receipt, because we used the receipt model

      const [{ fields: receipt }] = documents;


      // The fields correspond to the model's document types and their field
      schemas. Refer to the Form Recognizer

      // documentation for information about the document types and field
      schemas within a model, or use the `getModel`

      // operation to view this information programmatically.

      console.log("The type of this receipt is:",
      receipt?.["ReceiptType"]?.value);

      ```


      #### From Request Body


      Alternatively, if the file is local (or in memory in the browser), a
      binary object can be uploaded. The following

      example uses the Node.JS filesystem API.


      ```javascript

      import * as fs from "fs";


      const file = fs.createReadStream("path/to/receipt.pdf");


      // The model that is passed to the following function call determines the
      type of the eventual result. In the

      // example, we will use the prebuilt receipt model, but you could use a
      custom model ID/name instead.

      const poller = await client.beginAnalyzeDocuments("prebuilt-receipt",
      file);


      // The result is a long-running operation (poller), which must itself be
      polled until the operation completes

      const {
        pages, // pages extracted from the document, which contain lines and words
        tables, // extracted tables, organized into cells that contain their contents
        styles, // text styles (ex. handwriting) that were observed in the document
        keyValuePairs, // extracted pairs of elements  (directed associations from one element in the input to another)
        entities, // extracted entities in the input's content, which are categorized (ex. "Location" or "Organization")
        documents // extracted documents (instances of one of the model's document types and its field schema)
      } = await poller.pollUntilDone();


      // Extract the fields of the first document. These fields constitute a
      receipt, because we used the receipt model

      const [{ fields: receipt }] = documents;


      // The fields correspond to the model's document types and their field
      schemas. Refer to the Form Recognizer

      // documentation for information about the document types and field
      schemas within a model, or use the `getModel`

      // operation to view this information programmatically.

      console.log("The type of this receipt is:",
      receipt?.["ReceiptType"]?.value);

      ```

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginAnalyzeDocument(modelId: string, input: string |
        FormRecognizerRequestBody, options?: AnalyzeDocumentOptions):
        Promise<AnalysisPoller>
      parameters:
        - id: modelId
          type: string
          description: the unique ID (name) of the model within this client's resource
        - id: input
          type: >-
            string | <xref
            uid="@azure/ai-form-recognizer.FormRecognizerRequestBody" />
          description: >-
            a URL (string) to an input document accessible from the public
            internet, or a
                           <xref:@azure/ai-form-recognizer.FormRecognizerRequestBody> that will be uploaded with the request
        - id: options
          type: <xref uid="@azure/ai-form-recognizer.AnalyzeDocumentOptions" />
          description: optional settings for the analysis operation and poller
      return:
        description: >-
          a long-running operation (poller) that will eventually produce an
          `AnalyzeResult`
        type: Promise&lt;<xref uid="@azure/ai-form-recognizer.AnalysisPoller" />&gt;
  - name: >-
      beginAnalyzeDocument<Document>(DocumentModel<Document>, string |
      FormRecognizerRequestBody,
      AnalyzeDocumentOptions<AnalyzeResult<Document>>)
    uid: '@azure/ai-form-recognizer.DocumentAnalysisClient.beginAnalyzeDocument_1'
    package: '@azure/ai-form-recognizer'
    summary: >
      Extract data from an input using a model that has a known, strongly-typed
      document schema (a `DocumentModel`). It

      is not currently possible to define a custom `DocumentModel` instance in
      the SDK, so only the models that are

      provided as part of `PrebuiltModels` can be used with this method
      overload.

      See <xref:PrebuiltModels>.


      The fields produced in the `AnalyzeResponse` depend on the model that is
      used for analysis. In TypeScript, the type

      of the result for this method overload is inferred from the type of the
      input `DocumentModel`.


      ### Examples


      This method supports both URLs (string) and streamable request bodies
      (<xref:@azure/ai-form-recognizer.FormRecognizerRequestBody>) such as

      Node.JS `ReadableStream` objects, browser `Blob`s, and `ArrayBuffer`s.


      #### From URL


      The Form Recognizer service will attempt to download a file using the
      submitted URL, so the URL must be accessible

      from the public internet. For example, a SAS token can be used to grant
      read access to a blob in Azure Storage, and

      the service will use the SAS-encoded URL to request the file.


      ```javascript

      import { PrebuiltModels } from "@azure/ai-form-recognizer";


      // the URL must be publicly accessible

      const url = "<receipt document url>";


      // The model that is passed to the following function call determines the
      type of the eventual result. In the

      // example, we will use the prebuilt receipt model.

      const poller = await client.beginAnalyzeDocuments(PrebuiltModels.Receipt,
      url);


      // The result is a long-running operation (poller), which must itself be
      polled until the operation completes

      const {
        pages, // pages extracted from the document, which contain lines and words
        tables, // extracted tables, organized into cells that contain their contents
        styles, // text styles (ex. handwriting) that were observed in the document
        keyValuePairs, // extracted pairs of elements  (directed associations from one element in the input to another)
        entities, // extracted entities in the input's content, which are categorized (ex. "Location" or "Organization")

        documents // extracted documents (instances of one of the model's document types and its field schema)
      } = await poller.pollUntilDone();


      // Extract the fields of the first document. These fields constitute a
      receipt, because we used the receipt model

      const [{ fields: receipt }] = documents;


      // Since we used the strongly-typed PrebuiltModels.Receipt object instead
      of the "prebuilt-receipt" model ID

      // string, the fields of the receipt are strongly-typed and have camelCase
      names (as opposed to PascalCase).

      console.log("The type of this receipt is:", receipt.receiptType?.value);

      ```


      #### From Request Body


      Alternatively, if the file is local (or in memory in the browser), a
      binary object can be uploaded. The following

      example uses the Node.JS filesystem API.


      ```javascript

      import * as fs from "fs";

      import { PrebuiltModels } from "@azure/ai-form-recognizer";


      const file = fs.createReadStream("path/to/receipt.pdf");


      // The model that is passed to the following function call determines the
      type of the eventual result. In the

      // example, we will use the prebuilt receipt model.

      const poller = await client.beginAnalyzeDocuments(PrebuiltModels.Receipt,
      file);


      // The result is a long-running operation (poller), which must itself be
      polled until the operation completes

      const {
        pages, // pages extracted from the document, which contain lines and words
        tables, // extracted tables, organized into cells that contain their contents
        styles, // text styles (ex. handwriting) that were observed in the document
        keyValuePairs, // extracted pairs of elements  (directed associations from one element in the input to another)
        entities, // extracted entities in the input's content, which are categorized (ex. "Location" or "Organization")

        documents // extracted documents (instances of one of the model's document types and its field schema)
      } = await poller.pollUntilDone();


      // Extract the fields of the first document. These fields constitute a
      receipt, because we used the receipt model

      const [{ fields: receipt }] = documents;


      // Since we used the strongly-typed PrebuiltModels.Receipt object instead
      of the "prebuilt-receipt" model ID

      // string, the fields of the receipt are strongly-typed and have camelCase
      names (as opposed to PascalCase).

      console.log("The type of this receipt is:", receipt.receiptType?.value);

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginAnalyzeDocument<Document>(model: DocumentModel<Document>,
        input: string | FormRecognizerRequestBody, options?:
        AnalyzeDocumentOptions<AnalyzeResult<Document>>):
        Promise<AnalysisPoller<AnalyzeResult<Document>>>
      parameters:
        - id: model
          type: >-
            <xref uid="@azure/ai-form-recognizer.DocumentModel"
            />&lt;Document&gt;
          description: >-
            a <xref:@azure/ai-form-recognizer.DocumentModel> representing the
            model to use for analysis and the expected output type
        - id: input
          type: >-
            string | <xref
            uid="@azure/ai-form-recognizer.FormRecognizerRequestBody" />
          description: >-
            a URL (string) to an input document accessible from the public
            internet, or a
                           <xref:@azure/ai-form-recognizer.FormRecognizerRequestBody> that will be uploaded with the request
        - id: options
          type: >-
            <xref uid="@azure/ai-form-recognizer.AnalyzeDocumentOptions"
            />&lt;<xref uid="@azure/ai-form-recognizer.AnalyzeResult"
            />&lt;Document&gt;&gt;
          description: optional settings for the analysis operation and poller
      return:
        description: >-
          a long-running operation (poller) that will eventually produce an
          `AnalyzeResult` with documents that have
                   the result type associated with the input model
        type: >-
          Promise&lt;<xref uid="@azure/ai-form-recognizer.AnalysisPoller"
          />&lt;<xref uid="@azure/ai-form-recognizer.AnalyzeResult"
          />&lt;Document&gt;&gt;&gt;
  - name: >-
      beginExtractGeneralDocument(string | FormRecognizerRequestBody,
      AnalyzeDocumentOptions<GeneralDocumentResult>)
    uid: >-
      @azure/ai-form-recognizer.DocumentAnalysisClient.beginExtractGeneralDocument
    package: '@azure/ai-form-recognizer'
    summary: >
      Extracts general document information from an input file. The general
      document result includes the information from

      layout analysis (pages, tables, and styles) as well as extracted key-value
      pairs and entities.

      ### Examples


      This method supports both URLs (string) and streamable request bodies
      (<xref:@azure/ai-form-recognizer.FormRecognizerRequestBody>) such as

      Node.JS `ReadableStream` objects, browser `Blob`s, and `ArrayBuffer`s.


      #### From URL


      The Form Recognizer service will attempt to download a file using the
      submitted URL, so the URL must be accessible

      from the public internet. For example, a SAS token can be used to grant
      read access to a blob in Azure Storage, and

      the service will use the SAS-encoded URL to request the file.


      ```javascript

      // the URL must be publicly accessible

      const url = "<document url>";


      const poller = await client.beginExtractGeneralDocument(url);


      // The result is a long-running operation (poller), which must itself be
      polled until the operation completes

      const {
        // the operation produces the fields from the layout operation
        pages, // pages extracted from the document, which contain lines and words
        tables, // extracted tables, organized into cells that contain their contents
        styles, // text styles (ex. handwriting) that were observed in the document

        // it also produces the following fields in addition
        keyValuePairs, // extracted pairs of elements  (directed associations from one element in the input to another)
        entities // extracted entities in the input's content, which are categorized (ex. "Location" or "Organization")
      } = await poller.pollUntilDone();

      ```


      #### From Request Body


      Alternatively, if the file is local (or in memory in the browser), a
      binary object can be uploaded. The following

      example uses the Node.JS filesystem API.


      ```javascript

      import * as fs from "fs";


      const file = fs.createReadStream("path/to/file.pdf");


      const poller = await client.beginExtractGeneralDocument(file);


      // The result is a long-running operation (poller), which must itself be
      polled until the operation completes

      const {
        // the operation produces the fields from the layout operation
        pages, // pages extracted from the document, which contain lines and words
        tables, // extracted tables, organized into cells that contain their contents
        styles, // text styles (ex. handwriting) that were observed in the document

        // it also produces the following fields in addition
        keyValuePairs, // extracted pairs of elements  (directed associations from one element in the input to another)
        entities // extracted entities in the input's content, which are categorized (ex. "Location" or "Organization")
      } = await poller.pollUntilDone();

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginExtractGeneralDocument(input: string |
        FormRecognizerRequestBody, options?:
        AnalyzeDocumentOptions<GeneralDocumentResult>):
        Promise<AnalysisPoller<GeneralDocumentResult>>
      parameters:
        - id: input
          type: >-
            string | <xref
            uid="@azure/ai-form-recognizer.FormRecognizerRequestBody" />
          description: >-
            a URL (string) to an input document accessible from the public
            internet, or a
                           <xref:@azure/ai-form-recognizer.FormRecognizerRequestBody> that will be uploaded with the request
        - id: options
          type: >-
            <xref uid="@azure/ai-form-recognizer.AnalyzeDocumentOptions"
            />&lt;<xref uid="@azure/ai-form-recognizer.GeneralDocumentResult"
            />&gt;
          description: optional settings for the analysis operation and poller
      return:
        description: >-
          a long-running operation (poller) that will eventually produce a
          general document result or an error
        type: >-
          Promise&lt;<xref uid="@azure/ai-form-recognizer.AnalysisPoller"
          />&lt;<xref uid="@azure/ai-form-recognizer.GeneralDocumentResult"
          />&gt;&gt;
  - name: >-
      beginExtractLayout(string | FormRecognizerRequestBody,
      AnalyzeDocumentOptions<LayoutResult>)
    uid: '@azure/ai-form-recognizer.DocumentAnalysisClient.beginExtractLayout'
    package: '@azure/ai-form-recognizer'
    summary: >
      Extracts only the layout (basic OCR information) from an input file. The
      layout result includes information about

      the pages and their text contents, extracted tables, and identified text
      styles.

      ### Examples


      This method supports both URLs (string) and streamable request bodies
      (<xref:@azure/ai-form-recognizer.FormRecognizerRequestBody>) such as

      Node.JS `ReadableStream` objects, browser `Blob`s, and `ArrayBuffer`s.


      #### From URL


      The Form Recognizer service will attempt to download a file using the
      submitted URL, so the URL must be accessible

      from the public internet. For example, a SAS token can be used to grant
      read access to a blob in Azure Storage, and

      the service will use the SAS-encoded URL to request the file.


      ```javascript

      // the URL must be publicly accessible

      const url = "<document url>";


      const poller = await client.beginExtractLayout(url);


      // The result is a long-running operation (poller), which must itself be
      polled until the operation completes

      const {
        pages, // pages extracted from the document, which contain lines and words
        tables, // extracted tables, organized into cells that contain their contents
        styles // text styles (ex. handwriting) that were observed in the document
      } = await poller.pollUntilDone();

      ```


      #### From Request Body


      Alternatively, if the file is local (or in memory in the browser), a
      binary object can be uploaded. The following

      example uses the Node.JS filesystem API.


      ```javascript

      import * as fs from "fs";


      const file = fs.createReadStream("path/to/file.pdf");


      const poller = await client.beginExtractLayout(file);


      // The result is a long-running operation (poller), which must itself be
      polled until the operation completes

      const {
        pages, // pages extracted from the document, which contain lines and words
        tables, // extracted tables, organized into cells that contain their contents
        styles // text styles (ex. handwriting) that were observed in the document
      } = await poller.pollUntilDone();

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginExtractLayout(input: string | FormRecognizerRequestBody,
        options?: AnalyzeDocumentOptions<LayoutResult>):
        Promise<AnalysisPoller<LayoutResult>>
      parameters:
        - id: input
          type: >-
            string | <xref
            uid="@azure/ai-form-recognizer.FormRecognizerRequestBody" />
          description: >-
            a URL (string) to an input document accessible from the public
            internet, or a
                           <xref:@azure/ai-form-recognizer.FormRecognizerRequestBody> that will be uploaded with the request
        - id: options
          type: >-
            <xref uid="@azure/ai-form-recognizer.AnalyzeDocumentOptions"
            />&lt;<xref uid="@azure/ai-form-recognizer.LayoutResult" />&gt;
          description: optional settings for the analysis operation and poller
      return:
        description: >-
          a long-running operation (poller) that will eventually produce a
          layout result or an error
        type: >-
          Promise&lt;<xref uid="@azure/ai-form-recognizer.AnalysisPoller"
          />&lt;<xref uid="@azure/ai-form-recognizer.LayoutResult" />&gt;&gt;
  - name: >-
      beginReadDocument(string | FormRecognizerRequestBody,
      AnalyzeDocumentOptions<ReadResult>)
    uid: '@azure/ai-form-recognizer.DocumentAnalysisClient.beginReadDocument'
    package: '@azure/ai-form-recognizer'
    summary: >
      Extracts textual information from a document such as the text contents of
      pages and identified written languages.

      ### Examples


      This method supports both URLs (string) and streamable request bodies
      (<xref:@azure/ai-form-recognizer.FormRecognizerRequestBody>) such as

      Node.JS `ReadableStream` objects, browser `Blob`s, and `ArrayBuffer`s.


      #### From URL


      The Form Recognizer service will attempt to download a file using the
      submitted URL, so the URL must be accessible

      from the public internet. For example, a SAS token can be used to grant
      read access to a blob in Azure Storage, and

      the service will use the SAS-encoded URL to request the file.


      ```javascript

      // the URL must be publicly accessible

      const url = "<document url>";


      const poller = await client.beginReadDocument(url);


      // The result is a long-running operation (poller), which must itself be
      polled until the operation completes

      const {
        // This operation only produces `pages` and `languages`
        pages, // pages extracted from the document, which contain lines and words
        languages, // extracted spans identifying the written language of text in the document
      } = await poller.pollUntilDone();

      ```


      #### From Request Body


      Alternatively, if the file is local (or in memory in the browser), a
      binary object can be uploaded. The following

      example uses the Node.JS filesystem API.


      ```javascript

      import * as fs from "fs";


      const file = fs.createReadStream("path/to/file.pdf");


      const poller = await client.beginReadDocument(file);


      // The result is a long-running operation (poller), which must itself be
      polled until the operation completes

      const {
        // This operation only produces `pages` and `languages`
        pages, // pages extracted from the document, which contain lines and words
        languages, // extracted spans identifying the written language of text in the document
      } = await poller.pollUntilDone();

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginReadDocument(input: string | FormRecognizerRequestBody,
        options?: AnalyzeDocumentOptions<ReadResult>):
        Promise<AnalysisPoller<ReadResult>>
      parameters:
        - id: input
          type: >-
            string | <xref
            uid="@azure/ai-form-recognizer.FormRecognizerRequestBody" />
          description: >-
            a URL (string) to an input document accessible from the public
            internet, or a
                           <xref:@azure/ai-form-recognizer.FormRecognizerRequestBody> that will be uploaded with the request
        - id: options
          type: >-
            <xref uid="@azure/ai-form-recognizer.AnalyzeDocumentOptions"
            />&lt;<xref uid="@azure/ai-form-recognizer.ReadResult" />&gt;
          description: optional settings for the analysis operation and poller
      return:
        description: >-
          a long-running operation (poller) that will eventually produce a read
          result or an error
        type: >-
          Promise&lt;<xref uid="@azure/ai-form-recognizer.AnalysisPoller"
          />&lt;<xref uid="@azure/ai-form-recognizer.ReadResult" />&gt;&gt;
