### YamlMime:TSTypeAlias
name: DatabaseAccountGetResults
uid: '@azure/arm-cosmosdb.DatabaseAccountGetResults'
package: '@azure/arm-cosmosdb'
summary: An Azure Cosmos DB database account.
fullName: DatabaseAccountGetResults
remarks: ''
isPreview: false
isDeprecated: false
syntax: >-
  type DatabaseAccountGetResults = ARMResourceProperties & {
  analyticalStorageConfiguration?: AnalyticalStorageConfiguration,
  apiProperties?: ApiProperties, backupPolicy?: BackupPolicyUnion,
  capabilities?: Capability[], capacity?: Capacity, connectorOffer?:
  ConnectorOffer, consistencyPolicy?: ConsistencyPolicy, cors?: CorsPolicy[],
  createMode?: CreateMode, databaseAccountOfferType?: undefined | "Standard",
  defaultIdentity?: undefined | string, diagnosticLogSettings?:
  DiagnosticLogSettings, disableKeyBasedMetadataWriteAccess?: undefined | false
  | true, disableLocalAuth?: undefined | false | true, documentEndpoint?:
  undefined | string, enableAnalyticalStorage?: undefined | false | true,
  enableAutomaticFailover?: undefined | false | true, enableCassandraConnector?:
  undefined | false | true, enableFreeTier?: undefined | false | true,
  enableMaterializedViews?: undefined | false | true,
  enableMultipleWriteLocations?: undefined | false | true, failoverPolicies?:
  FailoverPolicy[], instanceId?: undefined | string, ipRules?:
  IpAddressOrRange[], isVirtualNetworkFilterEnabled?: undefined | false | true,
  keyVaultKeyUri?: undefined | string, kind?: DatabaseAccountKind, locations?:
  Location_2[], networkAclBypass?: NetworkAclBypass,
  networkAclBypassResourceIds?: string[], privateEndpointConnections?:
  PrivateEndpointConnection[], provisioningState?: undefined | string,
  publicNetworkAccess?: PublicNetworkAccess, readLocations?: Location_2[],
  restoreParameters?: RestoreParameters, systemData?: SystemData,
  virtualNetworkRules?: VirtualNetworkRule[], writeLocations?: Location_2[] }
